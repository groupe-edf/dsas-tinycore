#! /usr/local/bin/php

// DSAS test suite to test all functionality of the DSAS

<?php

putenv("WEBDRIVER_FIXEFOX_DRIVER=/usr/local/bin/geckodriver");
require_once('/usr/local/share/dsas/vendor/autoload.php');
use Facebook\WebDriver\Firefox\FirefoxDriver;
use Facebook\WebDriver\Firefox\FirefoxOptions;
use Facebook\WebDriver\Firefox\FirefoxProfile;
use Facebook\WebDriver\Exception\TimeoutException;
use Facebook\WebDriver\Interactions\WebDriverActions;
use Facebook\WebDriver\WebDriverKeys;
use Facebook\WebDriver\WebDriverWait;
use Facebook\WebDriver\WebDriverBy;
use Facebook\WebDriver\WebDriverSelect;
use Facebook\WebDriver\WebDriverExpectedCondition;

// Modifiable constants
$sshot = true;
define("_user", "tc");
define("_pass", "dSaO2021cTf");
define("_delay", 5);  // 5 seconds
define("_retry", 50);  // 50 ms
define("_LEN", 60);
define("_adminport", "5000");
define("_share", "/usr/local/share/dsas");
define("_red", "\033[1;31m");
define("_green", "\033[1;32m");
define("_yellow", "\033[1;33m");
define("_normal", "\033[1;39m");

// Don't modify below here
$sidx = 0;
$nfail = 0;

function msg($msg = "Test") {
  if (strlen($msg) > _LEN)
    $msg = substr($msg, 0, _LEN) . " .";
  else
    $msg = $msg .  " " . str_repeat(".", _LEN - strlen($msg) + 1);
  echo $msg . " ";
}

function pass() {
  echo _green . "[PASS]" . _normal . PHP_EOL; 
}

function fail() {
  echo _yellow . "[FAIL]" . _normal . PHP_EOL;
  $GLOBALS["nfail"]++;
}

function fatal() {
  echo _red. "[FATAL]" . _normal . PHP_EOL;
  $GLOBALS["nfail"]++;
}

function screenshot() {
  $GLOBALS["driver"]->takeScreenshot("screenshot-" . $GLOBALS["sidx"] . ".png");
  echo "Screenshot of navigator available in file 'screenshot-" . $GLOBALS["sidx"]++ . ".png'" . PHP_EOL;
}

function modal_delay() {
  // In Bootstrap using the "fade" option with modals, the objects
  // become visible before we can use them. We have to wait for the
  // modal animation to finish. For now use a small sleep, but I'd 
  // like to find a reliable method to detect the end of the animation
  usleep(500000);
}

function test(string $_msg, callable $_fn, bool $_fatal = false, $sshot = -1) {
  if ($sshot === -1)
    $sshot = $GLOBALS["sshot"];
  try {
    msg($_msg);
    if ($_fn())
      pass();
    else if ($_fatal)
      throw new RuntimeException("The previous error was fatal");
    else {
      fail();
      if ($sshot) 
        screenshot();
    }
  } catch (Throwable $e) {
    if ($_fatal) {
      fatal(); 
      echo $e->getMessage() . PHP_EOL;
      throw $e;
    } else {
      fail();
      echo $e->getMessage() . PHP_EOL;
      if ($sshot)
        screenshot();
    }
  }
}

function hostip() {
  // Get IP addresss of the principal interface
  if ($handle = opendir("/sys/class/net")) {
    while (false != ($entry = readdir($handle))) {
      switch ($entry) {
        case ".":
        case "..":
        case "lo":
        case (preg_match("/dummy/", $entry) ? true : false):
        case (preg_match("/tunl/", $entry) ? true : false):
          break;
        default:
          $pattern = "/inet addr:(\d+\.\d+\.\d+\.\d+)/";
          exec("/sbin/ifconfig $entry", $output, $retval);
          if ($retval != 0)
            return false;
          preg_match($pattern, implode(" ", $output), $matches);
          if (count($matches) < 2)
            return false;
          return $matches[1];
      }
    }
  }
  return ""; 
}

function readline($prompt = null) {
  if ($prompt)
    echo $prompt;
  $line = rtrim(fgets(STDIN, 1024));
  return $line;
}

function readpassword($prompt = null) {
  if ($prompt)
    echo $prompt;
  exec("stty -echo");
  $line = rtrim(fgets(STDIN, 1024));
  exec("stty echo");
  echo PHP_EOL;
  return $line;
}

// A function for all of the failing tests including feedback
function feedfn($msg, $fld, $value) {
  $GLOBALS["args"] = [];
  $GLOBALS["args"][] = $fld;
  $GLOBALS["args"][] = $value;
  test($msg, function () {
      $fld = $GLOBALS["args"][0];
      $value = $GLOBALS["args"][1];
      $GLOBALS["driver"]->executeScript("for (feed of document.getElementsByClassName(\"form-control\")) feed.setAttribute(\"class\", \"form-control\");");
      $GLOBALS["driver"]->findElement(WebDriverBy::id($fld))->clear()->sendKeys($value);
      save(false);
      try { 
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::className("is-invalid")));
      } catch (TimeoutException $e) {
        throw new RuntimeException("Undetected bad feedback value");
      }
      return (str_contains($GLOBALS["driver"]->findElement(WebDriverBy::id($fld))->getAttribute("class"), "is-invalid"));
    }); 
}

// Apply and clear modals
function apply() {
  foreach ($GLOBALS["driver"]->findElements(WebDriverBy::className("btn")) as $el) {
    if (str_contains($el->getAttribute("class"), "nav-link")) {
      $el->click();  // Click on Apply button
      break;
    }
  }
  $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
  $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click(); // Click Ok to confirm
  // Extra long delay here during apply
  $GLOBALS["driver"]->wait(4 * _delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("cancelDSAS")));
  $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
  modal_delay();
  $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click(); // Click Ok to confirm
  // Wait for modal to clear
  $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
}

// Hit save button on page and clear any modals
function save($modal = true) {
  // Have to be careful not to click the Apply button
  foreach ($GLOBALS["driver"]->findElements(WebDriverBy::className("btn")) as $el) {
    if (str_contains($el->getAttribute("class"), "nav-link"))
      continue;
    if ($el->getTagName() !== "input")
      continue;
    $el->click();
    break;
  }
  if ($modal) {
    $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
    modal_delay();
    $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click(); // Click Ok to confirm
    $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
  }
}

// A function for succeeding test with modal ok button
function modalfn($msg, $fld, $value, $modal = true) {
  $GLOBALS["args"] = [];
  $GLOBALS["args"][] = $fld;
  $GLOBALS["args"][] = $value;
  $GLOBALS["args"][] = $modal;
  test($msg, function () {
      $fld = $GLOBALS["args"][0];
      $value = $GLOBALS["args"][1];
      $GLOBALS["driver"]->executeScript("for (feed of document.getElementsByClassName(\"form-control\")) feed.setAttribute(\"class\", \"form-control\");");
      $GLOBALS["driver"]->findElement(WebDriverBy::id($fld))->clear()->sendKeys($value);
      try { 
        save($GLOBALS["args"][2]);
      } catch (TimeoutException $e) {
        throw new RuntimeException("Error setting value");
      }
      return (str_contains($GLOBALS["driver"]->findElement(WebDriverBy::id($fld))->getAttribute("value"), $value));
    }); 
}

// Read password from console
$password = readpassword(_normal . "Enter password of user '" . _user . "' [Return for default]: ");
if (empty($password))
  $password = _pass;

// Ask for testing mode
while (true) {
  echo PHP_EOL . "[O] All tests [default]" . PHP_EOL;
  echo "[1] Package Verification tests" . PHP_EOL;
  echo "[2] Security tests" . PHP_EOL;
  echo "[3] Login page tests" . PHP_EOL;
  echo "[4] Status page tests" . PHP_EOL;
  echo "[5] Web configuration page tests" . PHP_EOL;
  echo "[6] Network configuration page tests" . PHP_EOL;
  echo "[7] Service configuration page tests" . PHP_EOL;
  echo "[8] Certificate configuration page tests" . PHP_EOL;
  echo "[9] Task configuration page tests" . PHP_EOL;
  echo "[A] User configuration page tests" . PHP_EOL;
  echo "[B] Backup/Restore tests" . PHP_EOL;
  switch ($x = readline("Select a value : ")) {
    case"":
    case "0": $what = "all"; break 2; 
    case "1": $what = "verif"; break 2; 
    case "2": $what = "secu"; break 2; 
    case "3": $what = "login"; break 2; 
    case "4": $what = "status"; break 2; 
    case "5": $what = "web"; break 2; 
    case "6": $what = "net"; break 2; 
    case "7": $what = "serv"; break 2; 
    case "8": $what = "cert"; break 2; 
    case "9": $what = "task"; break 2; 
    case"a":
    case "A": $what = "user"; break 2; 
    case "b":
    case "B": $what = "backup"; break 2; 
    default : echo "Unrecognized option '" . $x . "'" . PHP_EOL; break;
  }
}

// Main block of test code
try {
  // Save XML configure file for restoration at the end
  msg("Save current configuration");
  if (copy("/var/dsas/dsas_conf.xml", "/var/dsas/dsas_conf.xml.test"))
    pass();
  else
    fatal();

  // Setup default test conditions
  test("Setting up default test conditions", function() {
      exec("sudo sudo -u verif mkdir -p /home/dsas/bas/share/ClamAV", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error creating ClamAV directory");
      exec("sudo cp " . _share . "/eicar.ndb /home/dsas/bas/share/ClamAV", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error copying to ClamAV directory"); 
      $retval = copy(_share . "/dsas_conf.xml", "/var/dsas/dsas_conf.xml");
      if (! $retval)
        throw new RuntimeException("Error copying XML config on lower machine"); 
      exec("ssh tc@haut cp -f " . _share . "/dsas_conf.xml /var/dsas/", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error copying XML config on upper machine"); 
      exec("sudo /etc/init.d/services/dsas apply", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error applying on lower machine"); 
      exec("ssh tc@haut sudo /etc/init.d/services/dsas apply", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error applying on upper machine"); 
      exec("ssh tc@haut sudo rm -fr /home/dsas/haut/share/tests /home/dsas/bas/share/tests", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error removing old test files on upper machine");
      exec("sudo rm -fr /home/dsas/haut/share/tests /home/dsas/bas/share/tests", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error removing old test files on lower machine"); 
      exec("ssh tc@haut sudo tar -C /home/dsas/haut/share -xzf " . _share . "/tests.tgz", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error installing test files on upper machine");
      exec("ssh tc@haut sudo sudo -u verif mkdir -p /home/dsas/bas/share/tests", $data, $retval);
      exec("ssh tc@haut sudo sudo -u verif chmod 770 /home/dsas/bas/share/tests", $data, $retval);
      exec("ssh tc@haut sudo sudo -u verif chgrp share /home/dsas/bas/share/tests", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error installing test files on upper machine");
      exec("sudo sudo -u haut mkdir -p /home/dsas/haut/share/tests", $data, $retval);
      exec("sudo sudo -u haut chmod 770 /home/dsas/haut/share/tests", $data, $retval);
      exec("sudo sudo -u haut chgrp haut /home/dsas/haut/share/tests", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error installing test files on lower machine");
      exec("sudo sudo -u verif mkdir -p /home/dsas/bas/share/tests", $data, $retval);
      exec("sudo sudo -u verif chmod 770 /home/dsas/bas/share/tests", $data, $retval);
      exec("sudo sudo -u verif chgrp share /home/dsas/bas/share/tests", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error installing test files on lower machine");
      exec("sudo cp -f " . _share . "/log/* /home/dsas/log", $data, $retval);
      if ($retval != 0)
        throw new RuntimeException("Error copying log files on lower machine");
      return true; 
    }, true); 

  // Tests to check that the DSAS verifications function as wanted
  if ($what === "all" || $what === "verif") {
    $dsas = simplexml_load_file("/var/dsas/dsas_conf.xml");
    foreach ($dsas->tasks->task as $GLOBALS["task"]) {
      test("Verifying " . $task->type . " tasks function correctly", function () {
          $task = $GLOBALS["task"];
          $directory = $task->directory;
          exec("runtask -f " . $task->id, $data, $retval);
          if ($retval != 0)
            throw new RuntimeException("Error running task type '" . $task->type . "'");
          if ($task->type  == "deb") {
            // For debian tasks the files to check are in the pool directory
            $have_pool = false;
            $pool = dirname($directory);
            while ($pool != $directory) {
              exec("sudo test -d \"/home/dsas/haut/share/" . $pool . "/pool\"", $data, $retval);
              if ($retval == 0) {
                $have_pool = true;
                $directory = $pool . "/pool";
                break;
              }
              $directory = $pool;
              $pool = dirname($directory);
            }
            if (! $have_pool)
              throw new RuntimeException("Pool directory not found for 'deb' task type");             
          }
          $data = [];
          exec("sudo test -d \"/home/dsas/bas/share/" . $directory . "\"", $data, $retval);
          if ($retval != 0)
            throw new RuntimeException("Task directory not created in '" . $task->type . "' verification");
          exec("sudo find /home/dsas/bas/share/" . $directory . " -name 'virus*'", $data);
          if (! empty($data))
            throw new RuntimeException("Virus not detected in '" . $task->type . "' verification");
          exec("sudo find /home/dsas/bas/share/" . $directory . " -name 'bad*'", $data);
          if (! empty($data))
            throw new RuntimeException("Badly signed file not detected in '" . $task->type . "' verification");
          exec("sudo find /home/dsas/bas/share/" . $directory . " -name 'unsign*'", $data);
          if (! empty($data))
            throw new RuntimeException("Unsigned file not detected in '" . $task->type . "' verification");          
          exec("sudo find /home/dsas/bas/share/" . $directory . " -name 'good*'", $data);
          if (empty($data))
            throw new RuntimeException("No signed files not detected in '" . $task->type . "' verification");          
          // FIXME Should we check that the right number of wanted files are passed ? 
          // How to do it generically ? Think about debian repos for example
          return true;
        }, false, false);
    }
  }

  if ($what === "all" || $what === "secu") {
     // FIXME Add lots more tests of the security settings here
     test("Testing open UDP/TCP ports on upper machine", function () {
         exec("sudo tc@haut netstat -naut 2> /dev/null", $data);
         $ip = hostip();
         foreach ($data as $d) {
           preg_match("/^([tcp|udp]).*\s([0-9.]+):([0-9]+).*\s([0-9.]+):.*LISTEN\s*$/",
              trim($d), $regex);
           if (empty($regex))
             continue;
           if ($regex[1] == "udp")
              throw new RuntimeException("Unexpected UDP port '" . $regex[3]  . "' open on upper machine");
           if ($regex[2] == $ip)
              throw new RuntimeException("Open TCP port '" . $regex[3] . "' on principal interface of upper machine" . PHP_EOL . $regex[0]); 
           // Only port 22 on the interconnection network should be open
           if ($regex[3] != "22")
              throw new RuntimeException("Unexpected TCP port '" .$regex[3] . "' open on upper machine" . PHP_EOL . $regex[0]); 
           break;
         }
         return true;
       });

     test("Testing open UDP/TCP ports on lower machine", function () {
         exec("netstat -naut 2> /dev/null", $data);
         $ip = hostip();
         foreach ($data as $d) {
           preg_match("/^([tcp|udp]).*\s([0-9.]+):([0-9]+).*\s([0-9.]+):.*LISTEN\s*$/",
              trim($d), $regex);
           if (empty($regex))
             continue;
           if ($regex[1] == "udp")
              throw new RuntimeException("Unexpected UDP port '" . $regex[3]  . "' open on lower machine");
           if ($regex[2] != $ip)
              throw new RuntimeException("Open TCP port '" . $regex[3] . "' on interconnection interface of lower machine" . PHP_EOL . $regex[0]);
           // In the default configuration only the adiminstration port 5000
           // on the interconnection network should be open
           if ($regex[3] != "5000")
              throw new RuntimeException("Unexpected TCP port '" .$regex[3] . "' open on lower machine" . PHP_EOL . $regex[0]); 
           break;
         }
         return true;
       });
  }

  // Setup local firefox instance
  test("Setting up firefox instance", function () {
      $firefoxOptions = new FirefoxOptions();
      $firefoxOptions->addArguments(["-headless","-width", "1920", "-height", "1200"]);

      $firefoxProfile = new FirefoxProfile();
      $firefoxProfile->setPreference("browser.download.folderList", 2);
      $firefoxProfile->setPreference("browser.download.manager.showWhenStarting", false);
      $firefoxProfile->setPreference("browser.helperApps.alwaysAsk.force", false);
      $firefoxProfile->setPreference("browser.helperApps.neverAsk.saveToDisk", "text/plain,application/gzip");
      $firefoxProfile->setPreference("browser.helperApps.neverAsk.openFile", "text/plain,application/gzip");
      $firefoxProfile->setPreference("browser.download.dir", "/home/tc");
      $firefoxProfile->setPreference("browser.download.manager.focusWhenStarting", false);
      $firefoxProfile->setPreference("browser.download.manager.useWindow", false);
      $firefoxProfile->setPreference("browser.download.manager.showAlertOnComplete", false);
      $firefoxProfile->setPreference("browser.download.manager.closeWhenDone", false);
      //$firefoxProfile->setPreference("browser.download.panel.shown", false);

      $caps = Facebook\WebDriver\Remote\DesiredCapabilities::firefox();
      $caps->setCapability(FirefoxOptions::CAPABILITY, $firefoxOptions);
      $caps->setCapability(FirefoxDriver::PROFILE, $firefoxProfile);
      $caps->setCapability("acceptInsecureCerts", true);
      $caps->setCapability("loggingPrefs", ['browser' => 'all']);
      $GLOBALS["driver"] = FirefoxDriver::start($caps);
      return true;
    }, true, false);

  // Get login page
  test("Navigating to /login.html", function () {
      $GLOBALS["driver"]->get("https://" . hostip() .":" . _adminport . "/login.html");
      $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("DSAS Login"));
      return ($GLOBALS["driver"]->getTitle() === "DSAS Login");
    }, true);

  if ($what === "all" || $what === "login") {

    // FIXME Check CapsLock message is correctly displayed
    // The CapsLock isn't a keypress but rather a keyboard modifier. We can't just send a keypress
    // Can't use javascript to simulate the keyboard as this is a major security risk. The only solution
    // I've found is to install selenium and use the Robot class to simulate a native keypress. This
    // is overkill for this simple test. So can't test this for now.

    // Enter no values and check error condition
    test("Empty username and password", function () {
        // Clear feedback on page before continuing
        $GLOBALS["driver"]->executeScript("for (feed of document.getElementsByClassName(\"form-control\")) feed.setAttribute(\"class\", \"form-control\");");
        $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::className("is-invalid")));
        return (str_contains($GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->getAttribute("class"), "is-invalid"));
      });

    // Enter username and no password and check error condition
    test("Empty password", function () {
        $GLOBALS["driver"]->executeScript("for (feed of document.getElementsByClassName(\"form-control\")) feed.setAttribute(\"class\", \"form-control\");");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->sendKeys(_user);
        $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::className("is-invalid")));
        return (str_contains($GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->getAttribute("class"), "is-invalid"));
      });

    // Enter bad username and password and check error condition. Careful of the delay
    test("Bad username and password", function () {
        $GLOBALS["driver"]->executeScript("for (feed of document.getElementsByClassName(\"form-control\")) feed.setAttribute(\"class\", \"form-control\");");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->clear()->sendKeys("BadUser");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->clear()->sendKeys("BadPassword");
        $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::className("is-invalid")));
        return (str_contains($GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->getAttribute("class"), "is-invalid"));
      });
  }

  // Enter good username and password
  test("Testing Login", function() {
      $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->clear()->sendKeys(_user);
      $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->clear()->sendKeys($GLOBALS["password"]);
      $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
      // Wait to be on main page
      try { 
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Main"));
      } catch (TimeoutException $e) {
        throw new RuntimeException("Bad Password");
      }
      return true;
    }, true);

  // Wait for page to be fully displayed
  $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("logpane")));

  if ($what === "all" || $what === "status") {
    // Check Status section of main page has real values
    test("Checking legal values in status bar", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::className("col-6")));
        // Fail if status bar contains NaN values
        return  (! str_contains($GLOBALS["driver"]->findElement(WebDriverBy::id("StatusBar"))->getDomProperty("innerHTML"), "NaN"));
      });

    // FIXME test status progress bars 

    // Test log search function. Need dummy logs
    test("Log search function", function () {
        $GLOBALS["driver"]->findElement(WebDriverBy::id("logsearch"))->clear()->sendKeys("dummy" . WebDriverKeys::ENTER);
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::className("bg-info")));
        return  (str_contains($GLOBALS["driver"]->findElement(WebDriverBy::className("bg-info"))->getDomProperty("innerHTML"), "dummy-search"));
      });

    // Test "only errors" button. Search for "Ok" at start of log line and 
    // test if a line is highlighted. Need dummy logs that don't have "Ok" anywhere
    // log lines
    test("Limiting logs to only errors", function () {
        $GLOBALS["driver"]->findElement(WebDriverBy::id("loghide"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("logpane")));
        $GLOBALS["driver"]->findElement(WebDriverBy::id("logsearch"))->clear()->sendKeys("Ok" . WebDriverKeys::ENTER);
        try { 
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::className("bg-info")));
        } catch (Exception $e) {
          // The keyword "Ok" not found as we wanted
          return true;
        }
        throw new RuntimeException("Error limiting logs to only errors");
      });
  }

  if ($what === "all" || $what === "web") {
    // Navigate to /web.html via navbar 
    test("Navigating to /web.html via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[0]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='web.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Web"));
        return ($GLOBALS["driver"]->getTitle() === "Web");
      }, true);

    // Toggle visbility of details on page
    $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//a[@href='#csr']")));
    $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#csr']"))->click();
    $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#cert']"))->click();

    // Test existence of PEM and CSR on page
    test("Testing existence of CSR", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("csr_body")));
        return (str_starts_with($GLOBALS["driver"]->findElement(WebDriverBy::id("csr_body"))->getDomProperty("innerHTML"), "-----BEGIN CERTIFICATE REQUEST-----"));
      });
    test("Testing existence of PEM", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("pem_body")));
        return (str_starts_with($GLOBALS["driver"]->findElement(WebDriverBy::id("pem_body"))->getDomProperty("innerHTML"), "-----BEGIN CERTIFICATE-----"));
      });

    // Download the PEM and CSR. Would be better to click on id="getpem" 
    // but couldn't get it to work properly
    test("Try downloading CSR", function () {
        $_uri = $GLOBALS["driver"]->findElement(WebDriverBy::id("getcsr"))->getAttribute("href");
        $_str = $GLOBALS["driver"]->executeScript("async function asyncfetch(uri) { const reponse = await fetch (uri); return reponse.text();}; return asyncfetch(\"" . $_uri ."\");");
        return (str_starts_with($_str, "-----BEGIN CERTIFICATE REQUEST-----"));
      });
    test("Try downloading PEM", function () {
        $_uri = $GLOBALS["driver"]->findElement(WebDriverBy::id("getpem"))->getAttribute("href");
        $_str = $GLOBALS["driver"]->executeScript("async function asyncfetch(uri) { const reponse = await fetch (uri); return reponse.text();}; return asyncfetch(\"" . $_uri ."\");");
        return (str_starts_with($_str, "-----BEGIN CERTIFICATE-----"));
      });

    // FIXME Test upload of CRT. Difficult to do without CA

    // FIXME Test change in certificate
  }

  if ($what === "all" || $what === "net") {
    // Navigate to /net.html via navbar 
    test("Navigating to /net.html via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[0]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='net.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Net"));
        return ($GLOBALS["driver"]->getTitle() === "Net");
      }, true);

    // Toggle visbility of details on page
    $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//a[@href='#iface1']")));
    $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#iface0']"))->click();
    $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#iface1']"))->click();

    // Save state of the upper network
    test("Saving network state of upper machine", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("iface_dhcp1")));
        $GLOBALS["net1"]["dhcp"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dhcp1"))->isSelected();
        $GLOBALS["net1"]["cidr"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_cidr1"))->getAttribute("value");
        $GLOBALS["net1"]["gateway"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_gateway1"))->getAttribute("value");
        $GLOBALS["net1"]["domain"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dns_domain1"))->getAttribute("value");
        $GLOBALS["net1"]["nameserver"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_nameserver1"))->getAttribute("value");
        return true;
      }, true);

    // Try setting and rereading the network details of the Upper machine
    test("Setting good static IP address configuration", function () {
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dhcp1"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dhcp1"))->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_cidr1"))->clear()->sendKeys("192.168.0.1/24");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_gateway1"))->clear()->sendKeys("192.168.0.254");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dns_domain1"))->clear()->sendKeys("example.com");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_nameserver1"))->clear()->sendKeys("8.8.8.8" . PHP_EOL . "1.1.1.1");
        save(false);
        // Refresh page and reread values
        $GLOBALS["driver"]->navigate()->refresh();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//a[@href='#iface1']")));
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#iface0']"))->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#iface1']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("iface_dhcp1")));
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dhcp1"))->isSelected() ||
            ("192.168.0.1/24" !== $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_cidr1"))->getAttribute("value")) ||
            ("192.168.0.254" !== $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_gateway1"))->getAttribute("value")) ||
            ("example.com" !== $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dns_domain1"))->getAttribute("value")) ||
            ! str_contains($GLOBALS["driver"]->findElement(WebDriverBy::id("iface_nameserver1"))->getAttribute("value"), "1.1.1.1"))
          throw new RuntimeException("Could not set upper network values");
        return true;
      });

    // Try setting bad values to the network fields
    feedfn("Setting bad CIDR address 1", "iface_cidr1", "270.0.1.1/24");
    feedfn("Setting bad CIDR address 2", "iface_cidr1", "192.168.0.1");
    feedfn("Setting bad CIDR address 3", "iface_cidr1", "test.example.com");
    $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_cidr1"))->clear()->sendKeys("192.168.0.1");
    feedfn("Setting bad gateway address 1", "iface_gateway1", "270.0.0.1");
    feedfn("Setting bad gateway address 2", "iface_gateway1", "192.168.0.254/24");
    feedfn("Setting bad gateway address 3", "iface_gateway1", "test.example.com");
    $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_gateway1"))->clear()->sendKeys("192.168.0.254");
    feedfn("Setting bad DNS domain 1", "iface_dns_domain1", "-example.com");
    $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dns_domain1"))->clear()->sendKeys("example.com");
    feedfn("Setting bad nameserver 1", "iface_nameserver1", "example.com");
    feedfn("Setting bad nameserver 2", "iface_nameserver1", "270.0.1.1");
    feedfn("Setting bad nameserver 3", "iface_nameserver1", "8.8.8.0/24");
    $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dns_domain1"))->clear()->sendKeys("8.8.8.8" . PHP_EOL . "1.1.1.1");
 
    // Try applying and seeing if network changed on upper machine
    test("Applying network configuration", function () {
        apply();
        // Ok the configuration has been correctly applied. Now look 
        // the real configuration of the network devices. Look for
        // network interface that is alphabetically last 
        $iface = "zzz";
        exec("ssh tc@haut ls /sys/class/net", $ifaces);
        foreach ($ifaces as $entry) {
          switch ($entry) {
            case ".":
            case "..":
            case "lo":
            case (preg_match("/dummy/", $entry) ? true : false):
            case (preg_match("/tunl/", $entry) ? true : false):
              break;
            default:
              if (strcmp($entry, $iface) < 0)
                $iface = $entry;
              break;
          }
        }
        if ($iface === "zzz")
          throw new RuntimeException("Can not find interface");
        exec("ssh tc@haut ifconfig " . $iface, $data);
        preg_match("/^inet addr:([0-9.]+).*Bcast:([0-9.]+).*Mask:([0-9.]+).*$/",
            trim($data[1]), $regex);
        $cidr = 32 - log((ip2long($regex[3]) ^ ip2long("255.255.255.255")) + 1, 2);  
        if ( "192.168.0.1/24" != $regex[1] . "/" . $cidr)
          throw new RuntimeException("Can not set IP address et mask");
        $data = [];
        exec("ssh tc@haut route", $data);
        preg_match("/^default\\s+([0-9.]+)/", $data[2], $regex);
        if ("192.168.0.254" != $regex[1])
          throw new RuntimeException("Can not IP gateway");
        $data = [];
        exec("ssh tc@haut cat /etc/resolv.conf", $data);
        if ("search example.com" != $data[0] ||
            "nameserver 8.8.8.8" != $data[1] ||
            "nameserver 1.1.1.1" != $data[2])
          throw new RuntimeException("Can not configure the DNS");
        return true;
      }); 

    // Restore state of upper network and apply
    test("Restoring original network configuration", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("iface_dhcp1")));
        if ($GLOBALS["net1"]["dhcp"] != $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dhcp1"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dhcp1"))->click();
	if (! $GLOBALS["net1"]["dhcp"] ) {
          $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_cidr1"))->clear()->sendKeys($GLOBALS["net1"]["cidr"]);
          $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_gateway1"))->clear()->sendKeys($GLOBALS["net1"]["gateway"]);
          $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_dns_domain1"))->clear()->sendKeys($GLOBALS["net1"]["domain"]);
          $GLOBALS["driver"]->findElement(WebDriverBy::id("iface_nameserver1"))->clear()->sendKeys($GLOBALS["net1"]["nameserver"]);
        }
        save(false);
        apply();
        return true;
      }, true);

    // FIXME should I repeat the above for iface0 ? Seems to be overkill as its uses the same code
  }

  if ($what === "all" || $what === "serv") {
    // Navigate to /service.html via navbar 
    test("Navigating to /service.html via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[0]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='service.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Service"));
        return ($GLOBALS["driver"]->getTitle() === "Service");
      }, true);

    // Save state of the services page
    test("Saving the state of the services", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("repo")));
        $GLOBALS["serv"]["ssh"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("ssh"))->isSelected();
        $GLOBALS["serv"]["user_tc"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("user_tc"))->getAttribute("value");
        $GLOBALS["serv"]["user_bas"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("user_bas"))->getAttribute("value");
        $GLOBALS["serv"]["user_haut"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("user_haut"))->getAttribute("value");
        $GLOBALS["serv"]["snmp"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp"))->isSelected();
        $GLOBALS["serv"]["snmp_user"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_user"))->getAttribute("value");
        $GLOBALS["serv"]["snmp_pass"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_pass"))->getAttribute("value");
        $encrypt = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_encrypt")));
        foreach ($encrypt->getOptions() as $el) {
          if ($el->isSelected()) {
            $GLOBALS["serv"]["snmp_encrypt"] = $el->getAttribute("value");
            break;
          }
        } 
        $privencrypt = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_privencrypt")));
        foreach ($privencrypt->getOptions() as $el) {
          if ($el->isSelected()) {
            $GLOBALS["serv"]["snmp_privencrypt"] = $el->getAttribute("value");
            break;
          }
        } 
        $GLOBALS["serv"]["snmp_passpriv"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_passpriv"))->getAttribute("value");
        $GLOBALS["serv"]["syslog"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("syslog"))->isSelected();
        $GLOBALS["serv"]["syslog_server"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("syslog_server"))->getAttribute("value");
        $GLOBALS["serv"]["ntp"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("ntp"))->isSelected();
        $GLOBALS["serv"]["ntp_pool"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("ntp_pool"))->getAttribute("value");
        $GLOBALS["serv"]["antivirus"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus"))->isSelected();
        $GLOBALS["serv"]["antivirus_uri"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus_uri"))->getAttribute("value");
        $GLOBALS["serv"]["repo"] = $GLOBALS["driver"]->findElement(WebDriverBy::id("repo"))->isSelected();
        return true;
      }, true);

    // Activate SSH
    if (! $GLOBALS["driver"]->findElement(WebDriverBy::id("ssh"))->isSelected())
      $GLOBALS["driver"]->findElement(WebDriverBy::id("ssh"))->click();

    // Try setting bad SSH IP addresses for admin
    feedfn("Setting bad admin address", "user_tc", "270.0.1.1/24");
    // Try setting good SSH IP addresses for admin
    modalfn("Setting good admin address", "user_tc", "127.0.0.1/32");
    // Try setting complex SSH IP addresses for admin (10.0.2.0/24,!10.0.2.100)
    modalfn("Setting complex admin address", "user_tc", "0.0.0.0/0,!127.0.0.1");
    $GLOBALS["driver"]->findElement(WebDriverBy::id("user_tc"))->clear()->sendKeys("0.0.0.0/0");
    feedfn("Setting bad upper user address", "user_haut", "270.0.1.1/24");
    modalfn("Setting good upper user address", "user_haut", "127.0.0.1/32");
    modalfn("Setting complex upper user address", "user_haut", "0.0.0.0/0,!127.0.0.1");
    $GLOBALS["driver"]->findElement(WebDriverBy::id("user_haut"))->clear();
    feedfn("Setting bad lower user address", "user_bas", "270.0.1.1/24");
    modalfn("Setting good lower user address", "user_bas", "127.0.0.1/32");
    modalfn("Setting complex lower user address", "user_bas", "0.0.0.0/0,!127.0.0.1");
    $GLOBALS["driver"]->findElement(WebDriverBy::id("user_bas"))->clear();

    // Get principal interface, IP and mask of lower machine
    $iface = "zzz";
    exec("ls /sys/class/net", $ifaces);
    foreach ($ifaces as $entry) {
      switch ($entry) {
        case ".":
        case "..":
        case "lo":
        case (preg_match("/dummy/", $entry) ? true : false):
        case (preg_match("/tunl/", $entry) ? true : false):
          break;
        default:
          if (strcmp($entry, $iface) < 0)
            $iface = $entry;
          break;
      }
    }
    if ($iface === "zzz")
      throw new RuntimeException("Can not find interface");
    exec("ifconfig " . $iface, $data);
    preg_match("/^inet addr:([0-9.]+).*Bcast:([0-9.]+).*Mask:([0-9.]+).*$/",
       trim($data[1]), $regex);
    $cidr = 32 - log((ip2long($regex[3]) ^ ip2long("255.255.255.255")) + 1, 2);  
    $ip = $regex[1];

    // Try applying config and seeing if listening on right SSH addresses and users 
    test("Applying ssh configuration", function () {
        apply();
        exec("netstat -at 2> /dev/null", $data);
        foreach ($data as $d) {
          preg_match("/^tcp.*\s([0-9.]+):[22|ssh].*\s([0-9.]+):.*LISTEN\s*$/",
             trim($d), $regex);
          if (empty($regex))
            continue;
          break;
        }
        if (empty($regex))
          throw new RuntimeException("Can not start ssh server");
        if ($GLOBALS["ip"] != $regex[1])
          throw new RuntimeException("Server ssh listening on wrong interface");

        exec("sudo cp -f /usr/local/etc/ssh/sshd_config /tmp", $data, $retval);
        if ($retval != 0)
          throw new RuntimeException("Can not copy /usr/local/etc/ssh/sshd_config");
        exec("sudo chown tc /tmp/sshd_config", $data, $retval);
        if ($retval != 0)
          throw new RuntimeException("Can not change owner of /tmp/sshd_config");
        $f = explode(PHP_EOL, file_get_contents("/tmp/sshd_config"));
        unlink("/tmp/sshd_config");
        $isok = false;
        foreach ($f as $_f) {
          preg_match("/^ListenAddress\s+([0-9.]+).*$/", trim($_f), $regex);
          if (! empty($regex) && $regex[1] == $GLOBALS["ip"]) {
            $isok = true;
            break;
          }
        }
        if (! $isok) {
          if (empty($regex))
            throw new RuntimeException("Could not detect ssh server listening address");
          else
            throw new RuntimeException("Server ssh listening on wrong address : " . $regex[1]);
        }
        $isok = false;
        foreach ($f as $_f) {
          preg_match("/^Match User ([a-z0-9-]+)\s+Address\s+([0-9.]+)\/([0-9]+)\s*$/", trim($_f), $regex);
          if (! empty($regex)) {
            if ( $regex[1] == "tc" && $regex[2] == "0.0.0.0" && $regex[3] == "0")
              $isok = true;
            break;
          }
        }
        if (! $isok) {
          if (empty($regex))
            throw new RuntimeException("Can not find ssh server users and address");
          else
            throw new RuntimeException("Server ssh listening incorrect users '" . $regex[1] . "' or address '" . $regex[2] . "/" . $regex[3] . "'");
        }
        return true;
      }, true);

    // Deactivate SSH
    test("Deactivation of SSH", function () {
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("ssh"))->isSelected()) {
          $GLOBALS["driver"]->findElement(WebDriverBy::id("ssh"))->click();
        }
        return true;
     }, true);

    // Test activation of SNMP
    test("Activation of SNMPv3", function () {
        if (! $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp"))->click();

        $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_user"))->clear()->sendKeys("TestUser");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_pass"))->clear()->sendKeys("P@ssw0rd!");
        $encrypt = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_encrypt")));
        $encrypt->selectByValue("SHA");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_passpriv"))->clear()->sendKeys("P@ssw0rd!");
        $privencrypt = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_privencrypt")));
        $privencrypt->selectByValue("AES");
        save();
        apply();
        exec("snmpwalk -v3 -l authPriv -u TestUser -a SHA -A P@ssw0rd! -x AES -X P@ssw0rd! 10.0.2.15 1.3.6.1.4.1.16845.100.100.2.0", $data, $retval);
        return ($retval == 0);
      });

    // Ensure that snmp is properly deactivated
    test("Deactivation of SNMPv3", function () {
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("snmp"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp"))->click();
        save();
        apply();
        exec("pgrep snmpd", $data, $retval);
        return ($retval != 0);
      }); 

    // Test activating and changing syslog with empty syslog server
    test("Activation of syslogd", function () {
        if (! $GLOBALS["driver"]->findElement(WebDriverBy::id("syslog"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("syslog"))->click();

        $GLOBALS["driver"]->findElement(WebDriverBy::id("syslog_server"))->clear();
        save();
        apply();
        exec("pgrep syslogd", $data, $retval);
        return($retval == 0); 
      });
        
    // Ensure that deactivating ntp works correctly
    test("Deactivation of syslog", function () {
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("syslog"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("syslog"))->click();
        save();
        apply();
        exec("pgrep syslogd", $data, $retval);
        return ($retval != 0);
      });
        
    // Test activating and changing ntp hosts (multiple IPs)
    test("Activation of NTP", function () {
        if (! $GLOBALS["driver"]->findElement(WebDriverBy::id("ntp"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("ntp"))->click();

        $GLOBALS["driver"]->findElement(WebDriverBy::id("ntp_pool"))->clear()->sendKeys("ntp1.example.com" . PHP_EOL . "ntp2.example.com");
        save();
        apply();
        exec("pgrep ntpd", $data, $retval);
        if ($retval == 0) {
          $cmdline = file_get_contents("/proc/" . $data[0] . "/cmdline");
          if (! preg_match("/.*ntp1.example.com.*ntp2.example.com.*$/", $cmdline))
            throw new RuntimeException("Incorrect ntp commandline");
        } else
          throw new RuntimeException("Can not start ntpd");
        return true;
      });
        
    // Ensure that deactivating ntp works correctly
    test("Deactivation of NTP", function () {
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("ntp"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("ntp"))->click();
        save();
        apply();
        exec("pgrep ntpd", $data, $retval);
        return ($retval != 0);
      });

    // Create EICAR virus test file and copy it it /tmp
    file_put_contents("/tmp/eicar", "X5O!P%@AP[4\PZX54(P^)7CC)7}\$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!\$H+H*");
    chmod("/tmp/eicar", 0644);
    file_put_contents("/tmp/novirus", "This file has no virus signature");
    chmod("/tmp/novirus", 0644);

    // Activate ClamAV via the web interface. Scan files and check infection or not
    test("Activating ClamAv and testing for detection of viruses", function() {
        if (! $GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus"))->click();
        save();
        apply();
        // Need to sleep here to allow clamd to startup. Not long as the database only
        // contains the EICAR signature. If other signatures are include might need to wait longer
        sleep(1);
        exec("clamdscan /tmp/eicar", $data, $retval);
	if ($retval != 1)
           throw new RuntimeException("ClamAv failed to detect a virus");
        exec("clamdscan /tmp/novirus", $data, $retval);
	if ($retval != 0)
           throw new RuntimeException("ClamAv failed to detect absence of a virus");
        return true;
      });    

    // Deactivate ClamAV via the web interface. Scan files and check for error running clamav
    test("Deactivating ClamAV", function () {
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus"))->click();
        save();
        apply();
        exec("clamdscan /tmp/eicar 2> /dev/null", $data, $retval);
	if ($retval != 2)
           throw new RuntimeException("ClamAv not stopped via web interface");
        return true;
      });
   
    // Remove temporary files
    unlink("/tmp/eicar");
    unlink("/tmp/novirus");

    // Activate repository and check is host on port 443 exists
    test("Activation of HTTPS repository", function () {
        if (! $GLOBALS["driver"]->findElement(WebDriverBy::id("repo"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("repo"))->click();
        save();
        apply();
        // Check if repo is running 
        exec("pgrep -f 'repo.conf'", $data, $retval); 
        return ($retval == 0);
      }, true);

    // Deactivate repository and check no host on port 443 exists
    test("Deactivation of HTTPS repository", function () {
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("repo"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("repo"))->click();
        save();
        apply();
        // Check if repo is running 
        exec("pgrep -f 'repo.conf'", $data, $retval); 
        return ($retval != 0);
      }, true);

    // Retore service configuration
    test("Restoring original services configuration", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("repo")));
        if ($GLOBALS["serv"]["ssh"] != $GLOBALS["driver"]->findElement(WebDriverBy::id("ssh"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("ssh"))->click();
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("ssh"))->isSelected()) {
          $GLOBALS["driver"]->findElement(WebDriverBy::id("user_tc"))->clear()->sendKeys($GLOBALS["serv"]["user_tc"]);
          $GLOBALS["driver"]->findElement(WebDriverBy::id("user_bas"))->clear()->sendKeys($GLOBALS["serv"]["user_bas"]);
          $GLOBALS["driver"]->findElement(WebDriverBy::id("user_haut"))->clear()->sendKeys($GLOBALS["serv"]["user_haut"]);
        }
        if ($GLOBALS["serv"]["snmp"] != $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp"))->click();
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("snmp"))->isSelected()) {
          $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_user"))->clear()->sendKeys($GLOBALS["serv"]["snmp_user"]);
          $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_pass"))->clear()->sendKeys($GLOBALS["serv"]["snmp_pass"]);
          $encrypt = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_encrypt")));
          $encrypt->selectByValue($GLOBALS["serv"]["snmp_encrypt"]);
          $GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_passpriv"))->clear()->sendKeys($GLOBALS["serv"]["snmp_passpriv"]);
          $privencrypt = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("snmp_privencrypt")));
          $privencrypt->selectByValue($GLOBALS["serv"]["snmp_privencrypt"]);
        }
        if ($GLOBALS["serv"]["syslog"] != $GLOBALS["driver"]->findElement(WebDriverBy::id("syslog"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("syslog"))->click();
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("syslog"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("syslog_server"))->clear()->sendKeys($GLOBALS["serv"]["syslog_server"]);
        if ($GLOBALS["serv"]["ntp"] != $GLOBALS["driver"]->findElement(WebDriverBy::id("ntp"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("ntp"))->click();
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("ntp"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("ntp_pool"))->clear()->sendKeys($GLOBALS["serv"]["ntp_pool"]);
        if ($GLOBALS["serv"]["antivirus"] != $GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus"))->click();
        if ($GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("antivirus_uri"))->clear()->sendKeys($GLOBALS["serv"]["antivirus_uri"]);
        if ($GLOBALS["serv"]["repo"] != $GLOBALS["driver"]->findElement(WebDriverBy::id("repo"))->isSelected())
          $GLOBALS["driver"]->findElement(WebDriverBy::id("repo"))->click();
        save();
        apply();
        return true;
      }, true);
  }

  if ($what === "all" || $what === "user") {
    // Navigate to /users.html via navbar 
    test("Navigating to /users.html via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='users.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Users"));
        return ($GLOBALS["driver"]->getTitle() === "Users");
      }, true);

    // Test a bad username
    test("Try to add bad username", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("AddUser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::id("AddUser"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("NewUser")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("NewUser"))->clear()->sendKeys("T3stUs3%");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        try {
          $GLOBALS["driver"]->wait(1, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          $GLOBALS["driver"]->wait(1, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        } catch (Exception $e) {
          // The modal hasn't cleared and so there's an error as we want. Clear and return
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          return true;
        }
        return false;
      }); 

    // Add a test user. Don't need to apply here 
    test("Try adding a username", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("AddUser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::id("AddUser"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("NewUser")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("NewUser"))->clear()->sendKeys("testuser");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        try {
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        } catch (Exception $e) {
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          return false;
        }
        return true;
      }); 

    // Try adding the same user and see if an error results
    test("Try to add an existing username", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("AddUser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::id("AddUser"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("NewUser")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("NewUser"))->clear()->sendKeys("testuser");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        try {
          $GLOBALS["driver"]->wait(1, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          $GLOBALS["driver"]->wait(1, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        } catch (Exception $e) {
          // The modal hasn't cleared and so there's an error as we want. Clear and return
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          return true;
        }
        return false;
      }); 

    // Change their information 
    test("Try changing the description of the existing user", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::id("description_testuser"))->clear()->sendKeys("Dummy Description");
        save();
        // The modal might have been signalling an error. Refresh the page
        // and see if the description is correct
        $GLOBALS["driver"]->navigate()->refresh();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        return ($GLOBALS["driver"]->findElement(WebDriverBy::id("description_testuser"))->getAttribute("value") == "Dummy Description");
      }); 

    // Test changing to a bad password
    test("Test bad password for added user", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@onclick=\"dsas_user_passwd('testuser');\"]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("UserPassword")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("UserPassword"))->clear()->sendKeys("bad");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        try {
          $GLOBALS["driver"]->wait(1, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          $GLOBALS["driver"]->wait(1, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        } catch (Exception $e) {
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          return true;
        }
        return false;
      });

    // Change the password of the test user. Examine /etc/passwd
    test("Test good password for added user", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@onclick=\"dsas_user_passwd('testuser');\"]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("UserPassword")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("UserPassword"))->clear()->sendKeys("T3stPassw0rd!"); 
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        try {
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        } catch (Exception $e) {
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          return false;
        }
        // Examine /etc/passwd to see if the user is really there
        exec("grep testuser /etc/passwd", $data, $retval);
        return ($retval == 0);
      });

    // Logout via navbar 
    test("Logging out via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[contains(@onclick,'dsas_logout();')]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("DSAS Login"));
        return ($GLOBALS["driver"]->getTitle() === "DSAS Login");
      });

    // Reconnect again as new user that at this point is inactive. 
    test("Testing login of inactive user", function() {
        $GLOBALS["driver"]->executeScript("for (feed of document.getElementsByClassName(\"form-control\")) feed.setAttribute(\"class\", \"form-control\");");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->clear()->sendKeys("BadUser");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->clear()->sendKeys("BadPassword");
        $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::className("is-invalid")));
        return (str_contains($GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->getAttribute("class"), "is-invalid"));
      });

    // Reconnect again as principal user. 
    test("Login as principal user", function() {
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->clear()->sendKeys(_user);
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->clear()->sendKeys($GLOBALS["password"]);
        $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
        // Wait to be on main page
        try { 
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Main"));
        } catch (TimeoutException $e) {
          throw new RuntimeException("Bad Password");
        }
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("logpane")));
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='users.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Users"));
        return ($GLOBALS["driver"]->getTitle() === "Users");
      });

    // Activating the added user
    test("Try activating added user", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::id("active_testuser"))->click();
        save();
        // The modal might have been signalling an error. Refresh the page
        // and see if the description is correct
        $GLOBALS["driver"]->navigate()->refresh();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        return ($GLOBALS["driver"]->findElement(WebDriverBy::id("description_testuser"))->getAttribute("value") == "Dummy Description");
      }); 

    // Logout via navbar 
    test("Logging out via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[contains(@onclick,'dsas_logout();')]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("DSAS Login"));
        return ($GLOBALS["driver"]->getTitle() === "DSAS Login");
      });

    // Reconnect again as new user that at this point is active. 
    test("Testing login as added user", function() {
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->clear()->sendKeys("testuser");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->clear()->sendKeys("T3stPassw0rd!"); 
        $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
        // Wait to be on main page
        try { 
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Main"));
        } catch (TimeoutException $e) {
          throw new RuntimeException("Bad Password");
        }
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("logpane")));
        return true;
      });

    // Wait for page to be fully displayed
    $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("logpane")));

    // Logout via navbar 
    test("Logging out via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[contains(@onclick,'dsas_logout();')]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("DSAS Login"));
        return ($GLOBALS["driver"]->getTitle() === "DSAS Login");
      });
    
    // Reconnect again as principal user. 
    test("Login as principal user", function() {
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->clear()->sendKeys(_user);
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->clear()->sendKeys($GLOBALS["password"]);
        $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
        // Wait to be on main page
        try { 
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Main"));
        } catch (TimeoutException $e) {
          throw new RuntimeException("Bad Password");
        }
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("logpane")));
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='users.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Users"));
        return ($GLOBALS["driver"]->getTitle() === "Users");
      });

    // Change user tye to "lower"
    test("Changing user type to 'lower'", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        $type = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("UserType_testuser")));
        $type->selectByValue("bas");
        save();
        // The modal might have been signalling an error. Refresh the page
        // and see if the description is correct
        $GLOBALS["driver"]->navigate()->refresh();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        $type = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("UserType_testuser")));
        foreach ($type->getOptions() as $el) {
          if ($el->isSelected()) {
            return ($el->getAttribute("value") == "bas");
            break;
          }
        } 
        return false;
      }); 

    // Logout via navbar 
    test("Logging out via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[contains(@onclick,'dsas_logout();')]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("DSAS Login"));
        return ($GLOBALS["driver"]->getTitle() === "DSAS Login");
      });
    
    // Login as added user and see if on passwd.hmtl rather than index.html
    test("Testing login as added user of type 'lower'", function() {
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->clear()->sendKeys("testuser");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->clear()->sendKeys("T3stPassw0rd!"); 
        $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
        // Wait to be on password page
        try { 
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Password"));
        } catch (TimeoutException $e) {
          throw new RuntimeException("Bad Password");
        }
        return (str_contains($GLOBALS["driver"]->getCurrentUrl(), "passwd.html"));
      });

    // Logout again 
    test("Testing logout as added user of type 'lower'", function() {
        $GLOBALS["driver"]->findElement(WebDriverBy::id("logout"))->click();
        return true;
      }, true);

    // Log back in again as principal user
    test("Login as principal user", function() {
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_user"))->clear()->sendKeys(_user);
        $GLOBALS["driver"]->findElement(WebDriverBy::id("inp_pass"))->clear()->sendKeys($GLOBALS["password"]);
        $GLOBALS["driver"]->findElement(WebDriverBy::className("btn"))->click();
        // Wait to be on main page
        try { 
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Main"));
        } catch (TimeoutException $e) {
          throw new RuntimeException("Bad Password");
        }
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("logpane")));
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='users.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Users"));
        return ($GLOBALS["driver"]->getTitle() === "Users");
      });

    // Delete test user and examine /etc/passwd and /home
    test("Delete the added user", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@onclick=\"dsas_user_delete('testuser');\"]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        try {
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        } catch (Exception $e) {
          // Modal visible so there is an error
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          return false;
        }
        // Examine /etc/passwd to see if the user is really deleted
        exec("grep testuser /etc/passwd", $data, $retval);
        return ($retval != 0);
      });
  }

  if ($what === "all" || $what === "backup") {
    // Navigate to /users.html via navbar 
    test("Navigating to /users.html via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='users.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Users"));
        return ($GLOBALS["driver"]->getTitle() === "Users");
      }, true);

    // Add a test user. Don't need to apply here 
    test("Try adding a username", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("AddUser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::id("AddUser"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("NewUser")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("NewUser"))->clear()->sendKeys("testuser");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        try {
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        } catch (Exception $e) {
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          return false;
        }
        return true;
      }, true); 

    // Backup the configuration
    test("Backing up the configuration via navbar", function () {
        if (file_exists("/home/tc/dsas_backup.tgz"))
          unlink("/home/tc/dsas_backup.tgz");
        save();
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[1]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[contains(@onclick,'dsas_backup();')]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        // need to wait a bit for file to be created
        sleep(1);
        return file_exists("/home/tc/dsas_backup.tgz");
      });

    // Delete the added user
    test("Delete the added user", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@onclick=\"dsas_user_delete('testuser');\"]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        try {
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        } catch (Exception $e) {
          // Modal visible so there is an error
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          return false;
        }
        // Examine /etc/passwd to see if the user is really deleted
        exec("grep testuser /etc/passwd", $data, $retval);
        return ($retval != 0);
      });

    // Restore the configuration. Can't do this via the navbar as no
    // easy way to select file to upload. So we cheat ;-)
    // Call the dsas_restore_core function here !! 
    test("Restoring the configuration", function () {
        $fp = fopen("/home/tc/dsas_backup.tgz", "r");
        $contents = fread($fp, filesize("/home/tc/dsas_backup.tgz"));
        fclose($fp);
        $contents = base64_encode($contents);
        $GLOBALS["driver"]->executeScript("dsas_restore_core(b64toBlob(arguments[0], \"application/gzip\"));", [$contents]);
        // Applying, wait for okDSAS to become Clickable. Long wait due to apply
        $GLOBALS["driver"]->wait(4 * _delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        //$GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        sleep(1);
        exec("grep testuser /etc/passwd", $data, $retval);
        return ($retval == 0);
      });

    if (file_exists("/home/tc/dsas_backup.tgz"))
      unlink("/home/tc/dsas_backup.tgz");

    // Delete added user
    test("Delete the added user", function () {
        $GLOBALS["driver"]->navigate()->refresh();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("description_testuser")));
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@onclick=\"dsas_user_delete('testuser');\"]"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        try {
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        } catch (Exception $e) {
          // Modal visible so there is an error
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
          return false;
        }
        // Examine /etc/passwd to see if the user is really deleted
        exec("grep testuser /etc/passwd", $data, $retval);
        return ($retval != 0);
      });
  }

  if ($what === "all" || $what === "cert") {
    // Navigate to /cert.html via navbar 
    test("Navigating to /cert.html via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[0]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='cert.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Certificates"));
        return ($GLOBALS["driver"]->getTitle() === "Certificates");
      }, true);

    // Toggle visiblity of certificates
    test("Toggle visibility of certificates", function() {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//a[@href='#gpg']")));
        $el = $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#cert']"));
        if ($el->getAttribute("aria-expanded") == "false")
          $el->click();
        $el = $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#pubkey']"));
        if ($el->getAttribute("aria-expanded") == "false")
          $el->click();
        $el = $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#gpg']"));
        if ($el->getAttribute("aria-expanded") == "false")
          $el->click();
        return true;
      });

    // Upload X509 certifate. Can't do this via the navbar as no easy
    // way to select file to upload. So we cheat and use the javascript
    // certifcate upload function directly 
    test("Uploading X509 certificate", function () {
        $fp = fopen(_share . "/Certificates/X509.pem", "r");
        $contents = fread($fp, filesize(_share . "/Certificates/X509.pem"));
        fclose($fp);
        $tmp = openssl_x509_parse($contents);
        if ($tmp === false)
          throw new RuntimeException("Can not read X509 certificate");
        $finger = openssl_x509_fingerprint($contents, "sha256");
        if ($finger === false)
          throw new RuntimeException("Can not fingerprint X509 certificate");
        $GLOBALS["finger"] = $finger;
        $contents = base64_encode($contents);
        $GLOBALS["driver"]->executeScript("dsas_upload_cert_core(b64toBlob(arguments[0], \"application/x-x509-user-cert\"), \"x509\", \"\");", [$contents]);
        // Applying, wait for okDSAS to become Clickable.
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        // Toggle visbility of details on page
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//a[@href='#add0']")));
	modal_delay();
        // Search for added fingerprint
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//a[starts-with(@href, '#add')]")) as $card)
          $card->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//div[@id='add0']")));
	modal_delay();
        $found = false;
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//div[starts-with(@id, 'add')]")) as $card) {
          if (str_contains($card->getDomProperty("innerHTML"), $finger)) {
            $GLOBALS["card"] = "#" . $card->getAttribute("id"); 
            $found = true;
            break;
          }
        }
        return ($found);
      });

    // Download added X509 certificate and compare with uploaded certificate
    test("Downloading X509 certificate", function () {
        $links = $GLOBALS["driver"]->findElements(WebDriverBy::tagName("a"));
        $i = 0;
        $found = false;
        foreach ($links as $link) {
          if ($link->getAttribute("href") == $GLOBALS["card"]) {
            $found = true;
            break;
          }
          $i++;
        }
        if (! $found)
          throw new RuntimeException("Can not find certificate to download");
        // The desired download link is the next one
        $_uri = $links[$i + 1]->getAttribute("href");
        $_str = $GLOBALS["driver"]->executeScript("async function asyncfetch(uri) { const reponse = await fetch (uri); return reponse.text();}; return asyncfetch(\"" . $_uri ."\");");
        $finger = openssl_x509_fingerprint($_str, "sha256");
        if ($finger != $GLOBALS["finger"])
          throw new RuntimeException("Downloaded certificate does not match uploaded certificate");
        return true;
      });

    // Delete uploaded X509 certificate
    test("Delete X509 certificate", function () {
        $links = $GLOBALS["driver"]->findElements(WebDriverBy::tagName("a"));
        $i = 0;
        $found = false;
        foreach ($links as $link) {
          if ($link->getAttribute("href") == $GLOBALS["card"]) {
            $found = true;
            break;
          }
          $i++;
        }
        if (! $found)
          throw new RuntimeException("Can not find certificate to delete");
        // The desired delete link is two links later
        $links[$i + 2]->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        modal_delay();
        $found = false;
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::tagName("a")) as $link) {
          if ($link->getAttribute("href") == $GLOBALS["card"]) {
            $found = true;
            break;
          }
        }
        if ($found)
          throw new RuntimeException("Certificate not deleted");
        return true;
      });

    // Toggle to invisible the X509 certificates 
    $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#cert']"))->click();

    // Upload an Openssl certificate
    test("Uploading Openssl key", function () {
        $fp = fopen(_share . "/Certificates/Openssl.pem", "r");
        $contents = fread($fp, filesize(_share . "/Certificates/Openssl.pem"));
        fclose($fp);
        $contents_nowrap = preg_replace('/^-----BEGIN (?:[A-Z]+ )?PUBLIC KEY-----([A-Za-z0-9\\/\\+\\s=]+)-----END (?:[A-Z]+ )?PUBLIC KEY-----$/ms', '\\1', $contents);
        $finger = hash("sha256", base64_decode($contents_nowrap));
        if ($finger == "")
          throw new RuntimeException("Can not fingerprint Openssl key");
        $GLOBALS["finger"] = $finger;
        $contents = base64_encode($contents);
        $GLOBALS["driver"]->executeScript("dsas_upload_cert_core(b64toBlob(arguments[0], \"application/x-pem-file\"), \"pubkey\", \"Openssl Test Certificate\");", [$contents]);
        // Applying, wait for okDSAS to become Clickable.
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        // Toggle visbility of details on page
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//a[@href='#pubkey0']")));
	modal_delay();
        // Search for added fingerprint
        $first = true;
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//a[starts-with(@href, '#pubkey')]")) as $card) {
          if ($first)
            $first = false;
          else
            $card->click();
        }
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//div[@id='pubkey0']")));
	modal_delay();
        $found = false;
        $first = true;
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//div[starts-with(@id, 'pubkey')]")) as $card) {
          if ($first) {
            $first = false;
            continue;
          }
          if (str_contains($card->getDomProperty("innerHTML"), $finger)) {
            $GLOBALS["card"] = "#" . $card->getAttribute("id"); 
            $found = true;
            break;
          }
        }
        return ($found);
      });

    // Download added Openssl key and compare with uploaded key
    test("Downloading Openssl key", function () {
        $links = $GLOBALS["driver"]->findElements(WebDriverBy::tagName("a"));
        $i = 0;
        $found = false;
        foreach ($links as $link) {
          if ($link->getAttribute("href") == $GLOBALS["card"]) {
            $found = true;
            break;
          }
          $i++;
        }
        if (! $found)
          throw new RuntimeException("Can not find key to download");
        // The desired download link is the next one
        $_uri = $links[$i + 1]->getAttribute("href");
        $_str = $GLOBALS["driver"]->executeScript("async function asyncfetch(uri) { const reponse = await fetch (uri); return reponse.text();}; return asyncfetch(\"" . $_uri ."\");");
        $_str_nowrap = preg_replace('/^-----BEGIN (?:[A-Z]+ )?PUBLIC KEY-----([A-Za-z0-9\\/\\+\\s=]+)-----END (?:[A-Z]+ )?PUBLIC KEY-----$/ms', '\\1', $_str);
        $finger = hash("sha256", base64_decode($_str_nowrap));
        if ($finger != $GLOBALS["finger"])
          throw new RuntimeException("Downloaded key does not match uploaded key");
        return true;
      });

    // Delete uploaded Openssl key
    test("Delete Openssl key", function () {
        $links = $GLOBALS["driver"]->findElements(WebDriverBy::tagName("a"));
        $i = 0;
        $found = false;
        foreach ($links as $link) {
          if ($link->getAttribute("href") == $GLOBALS["card"]) {
            $found = true;
            break;
          }
          $i++;
        }
        if (! $found)
          throw new RuntimeException("Can not find key to delete");
        // The desired delete link is two links later
        $links[$i + 2]->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        modal_delay();
        $found = false;
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::tagName("a")) as $link) {
          if ($link->getAttribute("href") == $GLOBALS["card"]) {
            $found = true;
            break;
          }
        }
        if ($found)
          throw new RuntimeException("Certificate not deleted");
        return true;
      });

    // Toggle to invisible the Openssl keys 
    $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#pubkey']"))->click();

    // Upload GPG certifate.
    test("Uploading GPG certificate", function () {
        $fp = fopen(_share . "/Certificates/Gpg.pub", "r");
        $contents = fread($fp, filesize(_share . "/Certificates/Gpg.pub"));
        fclose($fp);
        if (exec("/usr/local/bin/gpg -no-default-keyring -vv " . _share . "/Certificates/Gpg.pub 2>&1", $text, $retval)) {
          $text = implode(PHP_EOL, $text);
          preg_match("/" . PHP_EOL . "pub.*" . PHP_EOL . "\s+([^\s]+)/", $text, $matches);
          $finger = $matches[1];
          $GLOBALS["finger"] = $finger;
        } else
          throw new RuntimeException ("Can not read Gpg certificate");
        
        $contents = base64_encode($contents);
        $GLOBALS["driver"]->executeScript("dsas_upload_cert_core(b64toBlob(arguments[0], \"application/pgp-keys\"), \"gpg\", \"\");", [$contents]);
        // Applying, wait for okDSAS to become Clickable.
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        // Toggle visbility of details on page
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//a[@href='#gpg0']")));
	modal_delay();
        // Search for added fingerprint
        $first = true;
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//a[starts-with(@href, '#gpg')]")) as $card) {
          if ($first)
            $first = false;
          else
            $card->click();
        }
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::xpath("//div[@id='gpg0']")));
	modal_delay();
        $found = false;
        $first = true;
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//div[starts-with(@id, 'gpg')]")) as $card) {
          if ($first) {
            $first = false;
            continue;
          }
          if (str_contains($card->getDomProperty("innerHTML"), $finger)) {
            $GLOBALS["card"] = "#" . $card->getAttribute("id"); 
            $found = true;
            break;
          }
        }
        return ($found);
      });

    // Download added GPG certificate and compare with uploaded certificate
    test("Downloading GPG certificate", function () {
        $links = $GLOBALS["driver"]->findElements(WebDriverBy::tagName("a"));
        $i = 0;
        $found = false;
        foreach ($links as $link) {
          if ($link->getAttribute("href") == $GLOBALS["card"]) {
            $found = true;
            break;
          }
          $i++;
        }
        if (! $found)
          throw new RuntimeException("Can not find certificate to download");
        // The desired download link is the next one
        $_uri = $links[$i + 1]->getAttribute("href");
        $_str = $GLOBALS["driver"]->executeScript("async function asyncfetch(uri) { const reponse = await fetch (uri); return reponse.text();}; return asyncfetch(\"" . $_uri ."\");");
        if ($tmp = tempnam("/tmp", "dsas_")) {
          file_put_contents($tmp, $_str);
          if (exec("/usr/local/bin/gpg -no-default-keyring -vv " . $tmp . " 2>&1", $text, $retval)) {
            $text = implode(PHP_EOL, $text);
            preg_match("/" . PHP_EOL . "pub.*" . PHP_EOL . "\s+([^\s]+)/", $text, $matches);
            $finger = $matches[1];
          } else
            throw new RuntimeException ("Can not read Gpg certificate");
        } else
          throw new RuntimeException("Can not save download GPG certificate");
        unlink($tmp);
        if ($finger != $GLOBALS["finger"])
          throw new RuntimeException("Downloaded certificate does not match uploaded certificate");
        return true;
      });

    // Delete uploaded GPG certificate
    test("Delete GPG certificate", function () {
        $links = $GLOBALS["driver"]->findElements(WebDriverBy::tagName("a"));
        $i = 0;
        $found = false;
        foreach ($links as $link) {
          if ($link->getAttribute("href") == $GLOBALS["card"]) {
            $found = true;
            break;
          }
          $i++;
        }
        if (! $found)
          throw new RuntimeException("Can not find certificate to delete");
        // The desired delete link is two links later
        $links[$i + 2]->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
        modal_delay();
        $found = false;
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::tagName("a")) as $link) {
          if ($link->getAttribute("href") == $GLOBALS["card"]) {
            $found = true;
            break;
          }
        }
        if ($found)
          throw new RuntimeException("Certificate not deleted");
        return true;
      });

    // Try uploading the wrong certificate type to X509
    test("Uploading invalid X509 certificate", function () {
        $fp = fopen(_share . "/Certificates/Openssl.pem", "r");
        $contents = fread($fp, filesize(_share . "/Certificates/Openssl.pem"));
        fclose($fp);
        $ncert = count($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//div[starts-with(@id, 'add')]")));
        $contents = base64_encode($contents);
        $GLOBALS["driver"]->executeScript("dsas_upload_cert_core(b64toBlob(arguments[0], \"application/x-x509-user-cert\"), \"x509\", \"\");", [$contents]);
        // Applying, wait for okDSAS to become Clickable. This will be an error this time
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
	modal_delay();
        return ($ncert == count($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//div[starts-with(@id, 'add')]"))));
      });

    // Try uploading the wrong certificate type to Openssl
    test("Uploading invalid Openssl key", function () {
        $fp = fopen(_share . "/Certificates/X509.pem", "r");
        $contents = fread($fp, filesize(_share . "/Certificates/X509.pem"));
        fclose($fp);
        $ncert = count($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//div[starts-with(@id, 'pubkey')]")));
        $contents = base64_encode($contents);
        $GLOBALS["driver"]->executeScript("dsas_upload_cert_core(b64toBlob(arguments[0], \"application/x-pem-file\"), \"pubkey\", \"\");", [$contents]);
        // Applying, wait for okDSAS to become Clickable. This will be an error this time
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
	modal_delay();
        return ($ncert == count($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//div[starts-with(@id, 'pubkey')]"))));
      });

    // Try uploading the wrong certificate type to GPG
    test("Uploading invalid GPG certificate", function () {
        $fp = fopen(_share . "/Certificates/X509.pem", "r");
        $contents = fread($fp, filesize(_share . "/Certificates/X509.pem"));
        fclose($fp);
        $ncert = count($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//div[starts-with(@id, 'gpg')]")));
        $contents = base64_encode($contents);
        $GLOBALS["driver"]->executeScript("dsas_upload_cert_core(b64toBlob(arguments[0], \"application/pgp-keys\"), \"gpg\", \"\");", [$contents]);
        // Applying, wait for okDSAS to become Clickable. This will be an error this time
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
	modal_delay();
        return ($ncert == count($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//div[starts-with(@id, 'gpg')]"))));
      });

    // Toggle to invisible the GPG certificates 
    $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#gpg']"))->click();
  }

  if ($what === "all" || $what === "task") {
    // Navigate to /tasks.html via navbar 
    test("Navigating to /task.html via navbar", function () {
        $GLOBALS["driver"]->findElements(WebDriverBy::className("nav-item"))[0]->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='tasks.html']"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::titleIs("Tasks"));
        return ($GLOBALS["driver"]->getTitle() === "Tasks");
      }, true);

    // Toggle visibility of Tasks
    $GLOBALS["driver"]->findElement(WebDriverBy::xpath("//a[@href='#Tasks']"))->click();

    // Get a set valid uploaded certificates to use for the tasks
    $_uri = "https://" . hostip() .":" . _adminport . "/api/dsas-cert.php";
    $_str = $GLOBALS["driver"]->executeScript("async function asyncfetch(uri) { const reponse = await fetch (uri); return reponse.text();}; return asyncfetch(\"" . $_uri ."\");");
    $_json = json_decode($_str);

    // Test add task rpm 
    $GLOBALS["finger"] = $_json[0]->dsas->gpg[0]->fingerprint;
    test("Add RPM Task", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("AddTask")));
        $GLOBALS["driver"]->findElement(WebDriverBy::id("AddTask"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("TaskName")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskName"))->clear()->sendKeys("Added RPM Task");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskDirectory"))->clear()->sendKeys("tests/dummyRPM");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskRun")));
        $tmp->selectByValue("never");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskType")));
        $tmp->selectByValue("rpm");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskAddCert")));
        $tmp->selectByValue($GLOBALS["finger"]);
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
	modal_delay();
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//span[starts-with(@id, 'taskname')]")) as $name) {
          if ($name->getDomProperty("innerHTML") == "Added RPM Task")
            return true;
        }
        return false;
      });

    // Add Debian task with selected architectures
    $GLOBALS["finger"] = $_json[0]->dsas->gpg[0]->fingerprint;
    test("Add Deb Task", function () { 
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("AddTask")));
        $GLOBALS["driver"]->findElement(WebDriverBy::id("AddTask"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("TaskName")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskName"))->clear()->sendKeys("Added Deb Task");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskDirectory"))->clear()->sendKeys("tests/dummyDeb");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskRun")));
        $tmp->selectByValue("never");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskType")));
        $tmp->selectByValue("deb");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskAddCert")));
        $tmp->selectByValue($GLOBALS["finger"]);
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskArchAll"))->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskArchAmd64"))->click();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
	modal_delay();
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//span[starts-with(@id, 'taskname')]")) as $name) {
          if ($name->getDomProperty("innerHTML") == "Added Deb Task")
            return true;
        }
        return false;
      });

    // Add Opsnssl task
    $GLOBALS["finger"] = $_json[0]->dsas->pubkey[0]->fingerprint;
    test("Add Openssl Task", function () { 
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("AddTask")));
	modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("AddTask"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("TaskName")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskName"))->clear()->sendKeys("Added Openssl Task");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskDirectory"))->clear()->sendKeys("tests/dummyOpenssl");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskRun")));
        $tmp->selectByValue("never");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskType")));
        $tmp->selectByValue("openssl");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskAddCert")));
        $tmp->selectByValue($GLOBALS["finger"]);
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::className("modal-backdrop")));
	modal_delay();
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//span[starts-with(@id, 'taskname')]")) as $name) {
          if ($name->getDomProperty("innerHTML") == "Added Openssl Task")
            return true;
        }
        return false;
      });

    // Add RPM task with wrong certificate type
    $GLOBALS["finger"] = $_json[0]->dsas->pubkey[0]->fingerprint;
    test("Add RPM Task with bad certificate", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("AddTask")));
	modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("AddTask"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("TaskName")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskName"))->clear()->sendKeys("Bad RPM Task");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskDirectory"))->clear()->sendKeys("tests/BadRPM");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskRun")));
        $tmp->selectByValue("never");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskType")));
        $tmp->selectByValue("rpm");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskAddCert")));
        $tmp->selectByValue($GLOBALS["finger"]);
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("cancelDSAS")));
        try {
          // This is going to be a wanted error modal
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
          modal_delay();
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click(); // Click Ok to confirm
          modal_delay();
        } catch (Exception $e) {
          throw new RuntimeException("No error detected with bad certificate");
        }
        return true;
      });

    // Trying adding a task with an XSS in the task name
    $GLOBALS["finger"] = $_json[0]->dsas->gpg[0]->fingerprint;
    test("Add RPM Task with XSS attack", function () {
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("AddTask")));
	modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("AddTask"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::id("TaskName")));
        modal_delay();
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskName"))->clear()->sendKeys("<script>alert(\"Bad RPM Task\");</script>");
        $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskDirectory"))->clear()->sendKeys("tests/BadRPM");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskRun")));
        $tmp->selectByValue("never");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskType")));
        $tmp->selectByValue("rpm");
        $tmp = new WebDriverSelect($GLOBALS["driver"]->findElement(WebDriverBy::id("TaskAddCert")));
        $tmp->selectByValue($GLOBALS["finger"]);
        $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
        $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("cancelDSAS")));
        try {
          // This is going to be a wanted error modal
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
          modal_delay();
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click(); // Click Ok to confirm
          modal_delay();
        } catch (Exception $e) {
          throw new RuntimeException("No error detected with bad certificate");
        }
        return true;
      });

    // Run a task and test that its running
    // Don't delete this task as next test as it might still be running. delay till th ened
    $GLOBALS["finger"] = $_json[0]->dsas->pubkey[0]->fingerprint;
    test("Run Openssl task", function () {
        apply();  // Apply the configuration to make the tasks available to run
        // The created task has no files in it. Copy them from the default setup
        exec("ssh tc@haut sudo cp -fpr /home/dsas/haut/share/tests/Openssl /home/dsas/haut/share/tests/dummyOpenssl", $data, $retval);
        if ($retval != 0)
          throw new RuntimeException("Error installing test files on upper machine");
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//a[starts-with(@onclick, 'dsas_task_run')]")) as $run) {
          if (! str_contains($run->getAttribute("onclick"), "Added Openssl Task"))
            continue;
          $run->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
          modal_delay();
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          usleep(10000);  // Short delay for task to start;
          exec("ps auwx | grep runtask | grep " . $GLOBALS["finger"], $data, $retval);
          if (empty($data))
            throw new RuntimeException("Task failed to start");
          modal_delay();
          return true;
        }
        throw new RuntimeException("Task to run not found");
      });

    // Examine log of existing task. Careful log needs to exist
    test("Examining log of Openssl task", function() {
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//a[starts-with(@onclick, 'dsas_task_info')]")) as $info) {
          if (! str_contains($info->getAttribute("onclick"), "Added Openssl Task"))
            continue;
          $info->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
          modal_delay();
          if ($GLOBALS["driver"]->findElement(WebDriverBy::className("modal-title"))->getDomProperty("innerHTML") != "Info : Added Openssl Task")
            throw new RuntimeException("Task logs not visible");
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("cancelDSAS")));
          modal_delay();
          return true;
        }
        throw new RuntimeException("Task not found");
      });

    test("Modify RPM task directory", function() {
        // Create the task directory to be kept, as the task hasn't run
        exec("ssh tc@haut sudo mkdir -p /home/dsas/haut/share/tests/dummyRPM /home/dsas/bas/share/tests/dummyRPM", $data, $retval);
        if ($retval == 0) 
          exec("ssh tc@haut sudo chown haut.haut /home/dsas/haut/share/tests/dummyRPM", $data, $retval);
        if ($retval == 0) 
          exec("ssh tc@haut sudo chown verif.share /home/dsas/bas/share/tests/dummyRPM", $data, $retval);
        if ($retval == 0)
          exec("sudo mkdir -p /home/dsas/haut/share/tests/dummyRPM /home/dsas/bas/share/tests/dummyRPM", $data, $retval);
        if ($retval == 0) 
          exec("sudo chown haut.haut /home/dsas/haut/share/tests/dummyRPM", $data, $retval);
        if ($retval == 0) 
          exec("sudo chown verif.share /home/dsas/bas/share/tests/dummyRPM", $data, $retval);
        if ($retval != 0)
          throw new RuntimeException("Error creating test directories");
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//a[starts-with(@onclick, 'dsas_task_modify')]")) as $mod) {
          if (! str_contains($mod->getAttribute("onclick"), "Added RPM Task"))
            continue;
          $mod->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
          modal_delay();
          $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskDirectory"))->clear()->sendKeys("tests/dummyRPM2");
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("cancelDSAS")));
          modal_delay();
          exec("ssh tc@haut sudo test -d /home/dsas/haut/share/tests/dummyRPM2", $data, $retval);
          if ($retval == 0)
            exec("ssh tc@haut sudo test -d /home/dsas/bas/share/tests/dummyRPM2", $data, $retval);
          if ($retval == 0)
            exec("sudo test -d /home/dsas/haut/share/tests/dummyRPM2", $data, $retval);
          if ($retval == 0)
            exec("sudo test -d /home/dsas/bas/share/tests/dummyRPM2", $data, $retval);
          if ($retval != 0)
            throw new RuntimeException("Task directory unexceptedly deleted");
          return true;
        }
        throw new RuntimeException("Task not found");
      });

    // Delete an existing task without removing its files and see that the files remain
    test("Delete RPM task leaving files in place", function() {
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//a[starts-with(@onclick, 'dsas_task_delete')]")) as $del) {
          if (! str_contains($del->getAttribute("onclick"), "Added RPM Task"))
            continue;
          $del->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
          modal_delay();
          $GLOBALS["driver"]->findElement(WebDriverBy::id("TaskDeleteFiles"))->click();
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("cancelDSAS")));
          modal_delay();
          exec("ssh tc@haut sudo test -d /home/dsas/haut/share/tests/dummyRPM2", $data, $retval);
          if ($retval == 0)
            exec("ssh tc@haut sudo test -d /home/dsas/bas/share/tests/dummyRPM2", $data, $retval);
          if ($retval == 0)
            exec("sudo test -d /home/dsas/haut/share/tests/dummyRPM2", $data, $retval);
          if ($retval == 0)
            exec("sudo test -d /home/dsas/bas/share/tests/dummyRPM2", $data, $retval);
          if ($retval != 0)
            throw new RuntimeException("Task directory unexceptedly deleted");
          // Remove the directory now that we know it wasn't removed
          exec("ssh tc@haut sudo rm -fr /home/dsas/haut/share/tests/dummyRPM2 /home/dsas/bas/share/tests/dummyRPM2", $data, $retval);
          exec("sudo rm -fr /home/dsas/haut/share/tests/dummyRPM2 /home/dsas/bas/share/tests/dummyRPM2", $data, $retval);
          return true;
        }
        throw new RuntimeException("Task not found");
      });

    // Delete an existing task removing its files and test that everything is gone
    test("Delete Deb task removing files", function() {
        // Create the task directory to be kept, as the task hasn't run
        exec("ssh tc@haut sudo mkdir /home/dsas/haut/share/tests/dummyDeb /home/dsas/bas/share/tests/dummyDeb", $data, $retval);
        if ($retval == 0) 
          exec("ssh tc@haut sudo chown haut.haut /home/dsas/haut/share/tests/dummyDeb", $data, $retval);
        if ($retval == 0) 
          exec("ssh tc@haut sudo chown verif.share /home/dsas/bas/share/tests/dummyDeb", $data, $retval);
        if ($retval == 0)
          exec("sudo mkdir /home/dsas/haut/share/tests/dummyDeb /home/dsas/bas/share/tests/dummyDeb", $data, $retval);
        if ($retval == 0) 
          exec("sudo chown haut.haut /home/dsas/haut/share/tests/dummyDeb", $data, $retval);
        if ($retval == 0) 
          exec("sudo chown verif.share /home/dsas/bas/share/tests/dummyDeb", $data, $retval);
        if ($retval != 0)
          throw new RuntimeException("Error creating test directories");
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//a[starts-with(@onclick, 'dsas_task_delete')]")) as $del) {
          if (! str_contains($del->getAttribute("onclick"), "Added Deb Task"))
            continue;
          $del->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
          modal_delay();
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("cancelDSAS")));
          modal_delay();
          exec("ssh tc@haut sudo test -d home/dsas/haut/share/tests/dummyRPM", $data, $retval);
          if ($retval != 0)
            exec("ssh tc@haut sudo test -d home/dsas/bas/share/tests/dummyRPM", $data, $retval);
          if ($retval != 0)
            exec("sudo test -d home/dsas/haut/share/tests/dummyRPM", $data, $retval);
          if ($retval != 0)
            exec("sudo test -d home/dsas/bas/share/tests/dummyRPM", $data, $retval);
          if ($retval == 0)
            throw new RuntimeException("Task directory not deleted");
          return true;
        }
        throw new RuntimeException("Task not found");
      });   

    // FIXME examine log of running task. THIS MIGHT BE HARD TO DO with short running tasks.

    // FIXME Kill a running tasks. Also hard to do.

    // Delete the Openssl task that should now be finished running
    test("Delete Openssl task removing files", function() {
        foreach ($GLOBALS["driver"]->findElements(WebDriverBy::xpath("//a[starts-with(@onclick, 'dsas_task_delete')]")) as $del) {
          if (! str_contains($del->getAttribute("onclick"), "Added Openssl Task"))
            continue;
          $del->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::elementToBeClickable(WebDriverBy::id("okDSAS")));
          modal_delay();
          $GLOBALS["driver"]->findElement(WebDriverBy::id("okDSAS"))->click();
          $GLOBALS["driver"]->wait(_delay, _retry)->until(WebDriverExpectedCondition::invisibilityOfElementLocated(WebDriverBy::id("cancelDSAS")));
          modal_delay();
          exec("ssh tc@haut sudo test -d home/dsas/haut/share/tests/dummyOpenssl", $data, $retval);
          if ($retval != 0)
            exec("ssh tc@haut sudo test -d home/dsas/bas/share/tests/dummyOpenssl", $data, $retval);
          if ($retval != 0)
            exec("sudo test -d home/dsas/haut/share/tests/dummyOpenssl", $data, $retval);
          if ($retval != 0)
            exec("sudo test -d home/dsas/bas/share/tests/dummyOpenssl", $data, $retval);
          if ($retval == 0)
            throw new RuntimeException("Task directory not deleted");
          return true;
        }
        throw new RuntimeException("Task not found");
      });   
  }

} catch (Exception $e) {
  // Catch other errors here so that firefox is shut down cleanly
  echo $e->getMessage() . PHP_EOL;
  if (array_key_exists("driver", $GLOBALS)) screenshot();
} finally {
  // Restore original XML configure file and apply it
  test("Restoring original configuration", function () {
      copy("/var/dsas/dsas_conf.xml.test", "/var/dsas/dsas_conf.xml"); 
      unlink("/var/dsas/dsas_conf.xml.test");
      // After cheating and replacing the files of the DSAS need to
      // refresh and wait for the refresh to finish. Don't know what
      // page we're on, so can't wait on an element. Use modal_delay
      $GLOBALS["driver"]->navigate()->refresh();
      modal_delay();
      if (array_key_exists("driver", $GLOBALS)) {
        apply();
        return true;
      } else {
        exec("sudo /etc/init.d/services/dsas apply", $data, $retval);
        if ($retval == 0)
          return true;
      }
    });

  // Remove 'testuser' if still active
  test("Removing 'testuser' if previous tests failed", function () {
      $testuser = file_get_contents("/etc/passwd");
      if (str_contains( file_get_contents("/etc/passwd"), "testuser")) {
        exec("sudo deluser testuser", $data, $retval);
        if ($retval != 0)
          return false;
      }
      return true;
    });

  // Quit firefox instance
  if (array_key_exists("driver", $GLOBALS)) $driver->quit();

  if ($nfail !== 0)
    return 1;
  else
    return 0;
}

?>

#!/bin/sh

RED="$(echo -e '\033[1;31m')"
GREEN="$(echo -e '\033[1;32m')"
YELLOW="$(echo -e '\033[1;33m')"
NORMAL="$(echo -e '\033[1;39m')"
MNT=/mnt

# FIXME : Make this configurable ?
INTERCO="192.168.192.0"
INTERCO_MASK="255.255.255.0"
INTERCO_BAS="$(echo $(echo $INTERCO | cut -d. -f1-3).$(($(echo $INTERCO | cut -d. -f4) + 1)) )"
INTERCO_HAUT="$(echo $(echo $INTERCO | cut -d. -f1-3).$(($(echo $INTERCO | cut -d. -f4) + 2)) )"

# FIXME temp change to VAR for testing !!
#VAR=/home/tc/dsas/var/dsas
VAR=/var/dsas
as_tc="sudo -E -u tc"
as_bas="sudo -E -u bas"

mounted(){
  grep $1 /etc/mtab > /dev/null 2>&1
  if [ $? == 0 ]; then return 0; fi
  return 1
}

mount_dsas(){
  if [ ! $(mounted /home/dsas) ]; then
    echo "Mounting ${GREEN}$DSAS${NORMAL} on ${GREEN}/home/dsas${NORMAL}"
    mkdir -p /home/dsas
    mount --noexec --nobind $DSAS /home/dsas
  fi
}

init_disk(){
  FDISKL=$(fdisk -l | awk '$1 ~ /dev/{printf " %s ",$1}')
  FOUND=""
  DISK=""
  ARGS="--stdout --radiolist 'Select device to format for the DSAS:' 0 0 0"
  # Loop through block devices
  for i in $(find /sys/block/*/ -mindepth 1 -maxdepth 1 -name dev); do
    case "$i" in
      *loop*|*ram*)
        continue
        ;;
    esac

    DEVNAME=$(echo "$i"| tr [!] [/] | awk 'BEGIN{FS="/"}{print $(NF-1)}')
    DEVMAJOR="$(cat $i|cut -f1 -d:)"
    [ "$DEVMAJOR" != '8' ] && continue
    FSTYPE="none"
    for PART in $FDISKL; do
      case "$PART" in
        *"/dev/$DEVNAME"*)
          FOUND=$DEVNAME
          FSTYPE="$(fstype $PART)"
          MOUNTPOINT=$(echo $PART | sed -e "s:.*\($DEVNAME.*\):/mnt/\1:g")
          [ -d $MOUNTPOINT ] || mkdir $MOUNTPOINT
          mount | grep -q $PART || mount $PART $MOUNTPOINT
          break
          ;;
      esac
    done
    SIZE="$(($(cat /sys/block/$DEVNAME/size) / 2))"
    for SUF in MB GB TB PB; do
      REM=$(($(($SIZE % 1000)) / 10))
      SIZE=$(($SIZE / 1000))
      [ $SIZE -lt 1000 ] && break
    done
    DISK="1"
    if [ $REM -lt 1 ]; then
      ARGS="$ARGS /dev/$DEVNAME '/dev/$DEVNAME [$SIZE$SUF]' off"
    elif [ $REM -lt 100 ]; then
      ARGS="$ARGS /dev/$DEVNAME '/dev/$DEVNAME [$SIZE.0$REM$SUF]' off"
    else
      ARGS="$ARGS /dev/$DEVNAME '/dev/$DEVNAME [$SIZE.$REM$SUF]' off"
    fi
  done

  if [ -z $FOUND ]; then
    if [ -z "$DISK" ]; then
      echo "${RED}No disk available for the DSAS. Aborting${NORMAL}"
      exit 1
    fi

    # No formatted disk found. Ask the user to format it
    DEV="$(echo $ARGS | xargs dialog)"
    echo "Creating partition table on ${GREEN}$DEV${NORMAL}"
    /sbin/fdisk $DEV << EOF > /dev/null 2>&1
n
p
1


w
EOF
    echo "Formatting ${GREEN}${DEV}1${NORMAL} as ${GREEN}EXT4${NORMAL}"
    /sbin/mkfs.ext4 ${DEV}1 > /dev/null 2>&1
    MNT="$(echo $DEV | sed -e 's/dev/mnt/')"
    mkdir -p ${MNT}1
    echo "Mounting  ${GREEN}${DEV}1${NORMAL} on  ${GREEN}${MNT}1${NORMAL}"
    mount ${DEV}1 ${MNT}1
 
    return 1
  else
    echo "Found formatted disk : ${GREEN}/dev/$FOUND${NORMAL}"

    return 0
  fi
}

get_dsas(){
  for d in $(find $MNT -mindepth 2 -maxdepth 2 -type d -name "dsas"); do
    if [ -d "$d/bas" ] && [ -d "$d/haut" ]; then
      DSAS=$d
      echo "Found DSAS directories in ${GREEN}$DSAS${NORMAL}"    
      break;
    fi
  done

  # First time the DSAS is run
  if [ -z "$DSAS" ]; then
    echo "Looking for disk to use for the ${GREEN}DSAS${NORMAL}"
    DISK=""
    # Find the largest partition that is mounted
    for d in $(find $MNT -maxdepth 1 -type d -name "sd*"); do
      if [ -z "$DISK" ]; then
        DISK=$d
        PART=$(basename $DISK)
        DEV=$(echo $PART | sed -e "s/[[:digit:].*]$//g")
        SIZE=`cat /sys/block/$DEV/$PART/size`
      else
        PART=`basename $d`
        DEV=$(echo $PART | sed -e "s/[[:digit:].*]$//g")
        if [ $(cat /sys/block/$DEV/$PART/size) -gt "$SIZE" ]; then
          DISK=$d
          SIZE=`cat /sys/block/$DEV/$PART/size`
        fi
      fi
    done

    if [ -z "$DISK" ]; then
      echo "${RED}No disk available for the DSAS. Aborting${NORMAL}"
      exit 1
    fi

    # Now we can setup the disk for the first time
    echo "Creating DSAS directories in ${GREEN}$DISK/dsas${NORMAL}"

    mkdir -p $DISK/dsas/bas
    mkdir -p $DISK/dsas/haut
    chmod -R 755 $DISK/dsas
    mkdir -p $DISK/dsas/verif
    chmod 755 $DISK/dsas/verif
    chown -R verif.verif $DISK/dsas/verif
    DSAS=$DISK/dsas
  fi

  TCE=$(readlink /etc/sysconfig/tcedir)
  if [ "${TCE:0:8}" == "/tmp/tce" ]; then
    TCE=$(echo $DSAS | sed -e "s/dsas/tce/")
    echo "Setting up TCE directory on ${GREEN}$TCE${NORMAL}"
    /usr/bin/tce-setdrive -s $TCE
  fi
}

valid_ip(){
  if [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    for i in 1 2 3 4; do
      [ $(echo "$1" | cut -d. -f$i) -gt 255 ] && return 1
    done
    return 0
  else
    return 1
  fi
}

valid_cidr() {
  mask=$(echo $1 | sed -e "s:^.*/\(.*\)$:\1:")
  ip=$(echo $1 | sed -e "s:^\(.*\)/.*$:\1:")
  [[ "$mask" =~ ^[0-9]+$ ]] || return 1
  [ $mask -gt 32 ] && return 1
  valid_ip $ip
 
  [ $? ] || return 1
  return 0
}

valid_domain(){
  [ ${#1} -lt 4 ] && return 1
  [ ${#1} -gt 253 ] && return 1
  [[ $1 =~ "^([a-zA-Z0-9](([a-zA-Z0-9-]){0,61}[a-zA-Z0-9])?\.)+([a-zA-Z]{2,})$" ]] || return 1
  return 0
}

config_network(){
  NETDEVICES="$(awk -F: '/eth.:|tr.:/{print $1}' /proc/net/dev 2>/dev/null)"
  if [ $(echo $NETDEVICES | wc -w) -lt 2 ]; then
    echo "${RED}At least two network devices are needed. Aborting !!${NORMAL}"
    exit 1
  fi

  d=$(xmllint --xpath 'string(dsas/config/network/bas/dhcp)' $VAR/dsas_conf.xml)
  if [ "$d" == "true" ]; then
    d="on"
  else
    d="off"
  fi
  DHCP="$(dialog --stdout --checklist 'Interface Bas:' 0 0 0 on 'DHCP' $d)"
  if [ "$DHCP" != "$d" ]; then
    if [ "$DHCP" == "on" ]; then
      echo -e "cd /dsas/config/network/bas/dhcp\nset true\nsave" | xmllint --shell $VAR/dsas_conf.xml
    else
      echo -e "cd /dsas/config/network/bas/dhcp\nset false\nsave" | xmllint --shell $VAR/dsas_conf.xml
    fi
  fi

  if [ "$DHCP" != "on" ]; then
    # Static IP. Configure the rest of the interface
    c=$(xmllint --xpath 'string(dsas/config/network/bas/cidr)' $VAR/dsas_conf.xml)
    while :; do
      CIDR="$(dialog --stdout --title 'IP Address in CIDR format' --inputbox 'Address:' 0 0 $c)"
      valid_cidr $CIDR && break;
      dialog --msgbox "IP Address invalid" 0 0
    done
    if [ "$CIDR" != "$c" ]; then
      echo -e "cd /dsas/config/network/bas/cidr\nset $CIDR\nsave" | xmllint --shell $VAR/dsas_conf.xml > /dev/null
    fi

    g=$(xmllint --xpath 'string(dsas/config/network/bas/gateway)' $VAR/dsas_conf.xml)
    while :; do
      GWAY="$(dialog --stdout --title 'Gateway IP Address' --inputbox 'Address:' 0 0 $g)"
      valid_ip $GWAY && break
      dialog --msgbox "IP Address invalid" 0 0
    done
    if [ "$GWAY" != "$g" ]; then
      echo -e "cd /dsas/config/network/bas/gateway\nset $GWAY\nsave" | xmllint --shell $VAR/dsas_conf.xml > /dev/null
    fi

    d=$(xmllint --xpath 'string(dsas/config/network/bas/dns/domain)' $VAR/dsas_conf.xml)
    while :; do
      DOMAIN="$(dialog --stdout --title 'DNS search domain' --inputbox 'Domain:' 0 0 $d)"
      valid_domain $DOMAIN && break
      dialog --msgbox "Domain invalid" 0 0
    done
    if [ "$DOMAIN" != "$d" ]; then
      echo -e "cd /dsas/config/network/bas/dns/domain\nset $DOMAIN\nsave" | xmllint --shell $VAR/dsas_conf.xml > /dev/null
    fi

    S=$(xmllint --xpath "string(dsas/config/network/bas/dns/nameserver)" $VAR/dsas_conf.xml)
    NS="$S"
    i=2
    while [ -n "$S" ]; do
      S=$(xmllint --xpath "string(dsas/config/network/bas/dns/nameserver[$i])" $VAR/dsas_conf.xml)
      [ -n "$S" ] && NS="$NS $S"
      $((i++))
    done
    NAME="$(dialog --stdout --title 'DNS name servers' --inputbox 'Nameservers:' 0 0 "$NS")"
    if [ "$NAME" != "$NS" ]; then
      ARGS="cd /dsas/config/network/bas/dns\nset <domain>$DOMAIN</domain>"
      if [ -z "${NAME// }" ]; then
        ARGS="${ARGS}<nameserver />"
      else
        for S in $NAME; do
          ARGS="${ARGS}<nameserver>$S</nameserver>"
          $((i++))
        done
      fi
      ARGS="${ARGS}\nsave"
      echo -e "$ARGS" | xmllint --shell $VAR/dsas_conf.xml
    fi
  fi
}

start_network(){
  NETDEVICES="$(awk -F: '/eth.:|tr.:/{print $1}' /proc/net/dev 2>/dev/null)"
  if [ $(echo $NETDEVICES | wc -w) -lt 2 ]; then
    echo "${RED}At least two network devices are needed. Aborting !!${NORMAL}"
    exit 1
  fi

  # Setup loopback
  /sbin/ifconfig lo 127.0.0.1 up
  route | grep -q 127.0.0.1 || /sbin/route add 127.0.0.1 lo &

  ETH0=$(echo $NETDEVICES | cut -d" " -f1)
  ETH1=$(echo $NETDEVICES | cut -d" " -f2)

  dhcp=$(xmllint --xpath "string(dsas/config/network/${TYP}/dhcp)" $VAR/dsas_conf.xml)
  if [ "$dhcp" == "true" ]; then
    echo -n "Using DHCP broadcast for ${GREEN}$ETH0${NORMAL}..."
    /sbin/udhcpc -b -i $ETH0 -x hostname:$(/bin/hostname) -p /var/run/udhcpc.$ETH0.pid > /dev/null 2>&1 &
    CNT=0
    until ifconfig | grep -q Bcast; do
      [ $((CNT++)) -gt 60 ] && break || sleep 1
    done
    sleep 1
    [ $CNT -gt 60 ] && echo "${RED}Fail${NORMAL}"
    [ $CNT -le 60 ] && echo "${GREEN}Ok${NORMAL}"          
  else
    echo "Using static IP for ${GREEN}$ETH0${NORMAL}."
    cidr=$(xmllint --xpath "string(dsas/config/network/${TYP}/cidr)" $VAR/dsas_conf.xml)
    IP=$(echo $cidr | sed -e "s:^\(.*\)/.*$:\1:")
    mask=$(echo $cidr | sed -e "s:^.*/\(.*\)$:\1:")
    value=$(( 0xffffffff ^ ((1 << (32 - $mask)) - 1) ))
    NET="$(( (value >> 24) & 0xff )).$(( (value >> 16) & 0xff )).$(( (value >> 8) & 0xff )).$(( value & 0xff ))"
    GWAY=$(xmllint --xpath "string(dsas/config/network/${TYP}/gateway)" $VAR/dsas_conf.xml)
    DOMAIN=$(xmllint --xpath "string(dsas/config/network/${TYP}/dns/domain)" $VAR/dsas_conf.xml)

    /sbin/ifconfig $ETH0 $IP netmask $NET up
    /sbin/route add default gw $GWAY &
    echo -e "search $DOMAIN" > /etc/resolv.conf
    NS=$(xmllint --xpath "string(dsas/config/network/${TYP}/dns/nameserver)" $VAR/dsas_conf.xml)
    i=2
    while :; do
      [ -z "${NS// }" ] && break
      echo -e "nameserver $NS" >> /etc/resolv.conf
      NS=$(xmllint --xpath "string(dsas/config/network/${TYP}/dns/nameserver[$i])" $VAR/dsas_conf.xml)
      i=$((i + 1))
    done
  fi

  if [ -z "$NO_INTERCO" ]; then
    echo "Using static IP for ${GREEN}$ETH1${NORMAL}."
    if [ "$TYP" == "bas" ]; then
      /sbin/ifconfig $ETH1 $INTERCO_BAS netmask $INTERCO_MASK up
      /sbin/route add $INTERCO_HAUT $ETH1 &
    else
      /sbin/ifconfig $ETH1 $INTERCO_HAUT netmask $INTERCO_MASK up
      /sbin/route add $INTERCO_BAS $ETH1 &
    fi
  fi
}

stop_network(){
  NETDEVICES="$(awk -F: '/eth.:|tr.:/{print $1}' /proc/net/dev 2>/dev/null)"
  ETH0=$(echo $NETDEVICES | cut -d" " -f1)
  ETH1=$(echo $NETDEVICES | cut -d" " -f2)
  GWAY=$(xmllint --xpath 'string(dsas/config/network/'${TYP}'/gateway)' $VAR/dsas_conf.xml.active)
  /sbin/route del default gw $GWAY
  pkill udhcpc
  /sbin/ifconfig $ETH0 down

  if [ -z "$NO_INTERCO" ]; then
    [ "$TYP" == "bas" ] && /sbin/route del $INTERCO_HAUT
    [ "$TYP" == "haut" ] && /sbin/route del $INTERCO_BAS

    /sbin/ifconfig $ETH1 down
  fi
  /sbin/ifconfig lo down
}

start_web_admin(){
  cp $VAR/admin.conf.dsas $VAR/admin.conf
  NETDEVICES="$(awk -F: '/eth.:|tr.:/{print $1}' /proc/net/dev 2>/dev/null)"
  ETH0=$(echo $NETDEVICES | cut -d" " -f1)
  ip=$(ifconfig $ETH0 | sed -rn "2s/[^:]*:([.[:digit:]]*).*/\1/p") 
  echo "Binding webserver to ${GREEN}$ETH0${NORMAL} and address ${GREEN}$ip${NORMAL}." 
  echo "server.bind = \"$ip\"" >> $VAR/admin.conf
  echo "Starting administration web server"
  $as_tc lighttpd -Df $VAR/admin.conf &
}

stop_web_admin(){
  PID=$(ps a | grep admin.conf | grep -v grep | xargs | cut -d" " -f1)
  [ -z "$PID" ] || kill $PID
}

start_sshd(){
  if [ "$TYP" == "bas" ]; then
    [ "$(xmllint --xpath "string(dsas/config/ssh/active)" $VAR/dsas_conf.xml)" == "false" ] && return 0
    USER_TC=$(xmllint --xpath "string(dsas/config/ssh/user_tc)" $VAR/dsas_conf.xml) 
    USER=$(xmllint --xpath "string(dsas/config/ssh/user_bas)" $VAR/dsas_conf.xml)

    NETDEVICES="$(awk -F: '/eth.:|tr.:/{print $1}' /proc/net/dev 2>/dev/null)"
    ETH0=$(echo $NETDEVICES | cut -d" " -f1)
    LISTEN=$(ifconfig $ETH0 | sed -rn "2s/[^:]*:([.[:digit:]]*).*/\1/p") 
  else
    USER_TC="$INTERCO_BAS"
    USER=$(xmllint --xpath "string(dsas/config/ssh/user_haut)" $VAR/dsas_conf.xml)
    if [ -z "$USER" ]; then
      LISTEN="$INTERCO_HAUT"
    else
      LISTEN="0.0.0.0"
    fi
  fi
  [ -z $USER_TC ] && [ -z $USER ] && return 0

  cp -f /usr/local/etc/ssh/sshd_config.dsas /usr/local/etc/ssh/sshd_config
  if [ ! -z $USER_TC ]; then
    cat << EOF >> /usr/local/etc/ssh/sshd_config

ListenAddress $LISTEN

Match User tc Address $USER_TC
	PasswordAuthentication yes
	PubkeyAuthentication yes

EOF
  fi

  if [ ! -z $USER ]; then
    cat << EOF >> /usr/local/etc/ssh/sshd_config
Match User $TYP Address $USER
	PasswordAuthentication yes
	PubkeyAuthentication yes
	ChrootDirectory /home/dsas/bas
        X11Forwarding no
	AllowTcpForwarding no
	AllowAgentForwarding no
	ForceCommand internal-sftp

EOF
  fi

  if [ -n "$SSHD_SIGHUP" ] && [ -f /var/run/sshd.pid]; then
    PID=$(cat /var/run/sshd.pid)
    if [ -d "/proc/$PID" ]; then
      echo "Sending ${GREEN}SIGHUP${NORMAL} to the ${GREEN}openssh${NORMAL} server"
      kill -HUP $PID
    else
      echo "Starting the ${GREEN}openssh${NORMAL} server"
      /usr/local/etc/init.d/openssh start >> /var/log/sshd.log 2>&1
    fi
  else
    echo "Starting the ${GREEN}openssh${NORMAL} server"
    /usr/local/etc/init.d/openssh start >> /var/log/sshd.log 2>&1
  fi
}

config_sshd(){
  if [ "$TYP" == "bas" ]; then
    # Wait for machine haut to become available
    i=0
    echo -ne "Waiting for SSH server on machine haut /"
    while :; do
      case $(($((i++)) % 4)) in
        0)
          echo -ne "\b-"
          ;;
        1)
          echo -ne "\b\\"
          ;;
        2)
          echo -ne "\b|"
          ;;
        3)
          echo -ne "\b/"
          ;;
      esac 
      ping -W 1 -c 1 $INTERCO_HAUT > /dev/null  2>&1 && break
    done
    echo -e "\b"
    echo "SSH server on machine haut available"
 
    echo "Generating admin user SSH keys"
    $as_tc ssh-keygen -b 4096 -t rsa -f /home/tc/.ssh/id_rsa -q -N ''

    echo "Copying public key to machine haut"
    $as_tc ssh-copy-id -i /home/tc/.ssh/id_rsa.pub -f tc@$INTERCO_HAUT

    echo "Backing up authorized keys on machine haut"
    $as_tc ssh -i /home/tc/.ssh/id_rsa tc@$INTERCO_HAUT filetool.sh -b
  fi
}

stop_sshd(){
  pkill sshd
}

start_repo(){
  repo="$(xmllint --xpath 'string(dsas/config/web/repo)' $VAR/dsas_conf.xml)"
  if [ "$repo" != "true" ]; then return 0; fi

  cp $VAR/repo.conf.dsas $VAR/repo.conf
  bas=$(xmllint --xpath "string(dsas/config/network/bas)" $VAR/dsas_conf.xml)
  ip=${ip addr show $bas | awk '/inet /{split($2,a,"/"); print a[1]}'}
  echo "Binding repo to ${GREEN}$bas${NORMAL} and address ${GREEN}$ip${NORMAL}." 
  echo 'server.bind = "$ip"' >> $VAR/repo.confq
  echo "Starting administration web server"
  $as_bas lighttpd -Df $VAR/repo.conf &
}

stop_repo(){
  PID=$(ps a | grep repo.conf | grep -v grep | xargs | cut -d" " -f1)
  [ -z "$PID" ] || kill $PID
}

start_syslog(){
  syslog=$(xmllint --xpath "string(dsas/config/syslog/active)" $VAR/dsas_conf.xml)
  server=$(xmllint --xpath "string(dsas/config/syslog/server)" $VAR/dsas_conf.xml)

  if [ "$syslog" == "true" ]; then
    [ -z $server ] || opts=" -R $server -L "
    /sbin/syslogd ${opts} && echo "${GREEN}syslogd started.${NORMAL}"
    /bin/klogd && echo "${GREEN}klogd started.${NORMAL}"
  fi
}

stop_syslog(){
  pkill klog
  pkill syslog
}

start_ntp(){
  # FIXME Use "-S" option of busybox ntpd to get information from service
  ntp=$(xmllint --xpath "string(dsas/config/ntp/active)" $VAR/dsas_conf.xml)
  next=$(xmllint --xpath "string(dsas/config/ntp/server[last()])" $VAR/dsas_conf.xml)

  if [ "$ntp" == "true" ] && [ "$last" != "" ]; then
    i=1
    opts=""
    while [ -n "$next" ]; do
      opts="$opts -p $next"
      next=$(xmllint --xpath "string(dsas/config/ntp/server[$i])" $VAR/dsas_conf.xml)
      i=$((i+1))
    done
    /sbin/syslogd ${opts} && echo "${GREEN}ntpd started.${NORMAL}"
    /usr/sbin/ntpd $opts
  fi
}

stop_ntp(){
  pkill ntpd
}

reboot_required(){
  echo -n "${YELLOW}Rebooting .${NORMAL}"
  for i in $(seq 1 1 5); do
    sleep 1
    echo -n " ."
  done
  /sbin/reboot
}

save_config(){
  # Make a copy of the config file for later comparison
  $as_tc cp -f $VAR/dsas_conf.xml $VAR/dsas_conf.xml.active

  echo "Saving DSAS configuration"
  $as_tc filetool.sh -b
}

case "${1}" in
  start)
    init_disk || reboot_required
    get_dsas
    mount_dsas

    if [ -f $VAR/dsas_typ ]; then
      TYP="$(cat $VAR/dsas_typ)"
      echo "Machine configured as type: ${GREEN}$TYP${NORMAL}"
      CONFIG_SSH=""
    else
      TYP="$(dialog --stdout --radiolist 'Select machine type:' 0 0 0 haut 'Haut/High' on bas 'Bas/Low' off)"
      $as_tc echo $TYP > $VAR/dsas_typ
      echo "Machine configured as type: ${GREEN}$TYP${NORMAL}"
      # The machine "haut" is configured from the web admin of "bas"
      [ "$TYP" == "bas" ] && config_network
      CONFIG_SSH="true"
    fi
    start_network
    start_sshd
    if [ "$TYP" == "bas" ]; then
      [ -n "$CONFIG_SSH" ] && config_sshd
      start_web_admin
      start_repo
      start_syslog
      start_ntp
    fi

    save_config
    ;;

  stop)
    if [ -f $VAR/dsas_typ ]; then
      TYP="$(cat $VAR/dsas_typ)"
    else
      TYP="haut"
    fi
    if [ "$TYP" == "bas" ]; then
      stop_ntp
      stop_syslog
      stop_repo
      stop_web_admin
    fi
    stop_sshd
    stop_network
    ;;

  restart)
    $0 stop
    sleep 1
    $0 start
    ;;

  reconfig)
    TYP="$(dialog --stdout --radiolist 'Select machine type:' 0 0 0 haut 'Haut/High' on bas 'Bas/Low' off)"
    $as_tc echo $TYP > $VAR/dsas_typ
    echo "Machine configured as type: ${GREEN}$TYP${NORMAL}"
    [ "$TYP" == "bas" ] && config_network
    config_sshd
    $0 restart
    ;;

  apply)
    if [ -f $VAR/dsas_typ ]; then
      TYP="$(cat $VAR/dsas_typ)"
    else
      TYP="haut"
    fi
    # Only restart network et ssh if changed to avoid interuptting transfers
    OLD=$(xmllint --xpath "dsas/config/network" $VAR/dsas_conf.xml.active)
    NEW=$(xmllint --xpath "dsas/config/network" $VAR/dsas_conf.xml)
    if [ "$OLD" != "$NEW" ]; then
      NO_INTERCO="true"
      stop_network
      start_network
    fi

    OLD=$(xmllint --xpath "dsas/config/ssh" $VAR/dsas_conf.xml.active)
    NEW=$(xmllint --xpath "dsas/config/ssh" $VAR/dsas_conf.xml)
    if [ "$OLD" != "$NEW" ]; then
      SSHD_SIGHUP="true"
      start_sshd
    fi

    # The other services can be restarted without risk
    stop_ntp
    start_ntp
    stop_syslog
    start_syslog
    stop_repo
    start_repo
    save_config
    ;;

  *)
    exit 1
    ;;
esac

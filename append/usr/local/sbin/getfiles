#! /bin/sh

# if not user tc, quit
[ "$(whoami)" != "tc" ] && { 1>&2 echo "$0: Must be run as user 'tc'"; exit 1; }

if [ -f "$(dirname $0)/dsas_common.sh" ]; then
  . $(dirname $0)/dsas_common.sh
else
  1>&2 echo "Common functions not found !!"
  exit -1
fi

as_haut="sudo sudo -E -u haut"
_ldir="/opt/lftp"
if [ -L "$DSAS_HOME" ]; then
  # This is an indication we are running in a docker instance. Can't chroot
  chroot_lftp="/usr/local/bin/lftp"
else
  chroot_lftp="sudo /usr/local/sbin/chroot --userspec=haut:haut $_ldir env LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:/lib /usr/local/bin/lftp"
  # Update resolv.conf and hosts in the chroot as networking might have changed
  for _f in /etc/hosts /etc/resolv.conf; do
    [ -f "$_ldir/$_f" ] || sudo /bin/cp -p $_f $_ldir$_f
    diff -q $_f $_ldir$_f >& /dev/null || sudo /bin/cp -p $_f $_ldir$_f
  done
fi
umask 022

# Usage : check_checksum <file> <chksum> <type>
check_checksum() {
  local chk

  case $3 in
    sha512) chk=$($as_haut cat "$1" | sha512sum - | sed -e "s/ -//g") ;;
    sha256) chk=$($as_haut cat "$1" | sha256sum - | sed -e "s/ -//g") ;;
    sha) chk=$($as_haut cat "$1" | sha1sum - | sed -e "s/ -$//g") ;;
    md5) chk=$($as_haut cat "$1" | md5sum - | sed -e "s/ -$//g") ;;
    *) return 0 ;;
  esac
  [ $chk != "$2" ] && return 0
  return 1
}

get_uri(){
  if [ "$TYP" == "haut" ]; then
    echo $(xmllint --xpath "string(dsas/tasks/task[$1]/uri)" "$CONF") 
  else
    local _dir=$(xmllint --xpath "string(dsas/tasks/task[$1]/directory)" "$CONF")
    local _uri="$DSAS_HOME/bas"
    _uri=${DSAS_BAS:${#_uri}}
    echo "sftp://bas:@$INTERCO_HAUT$_uri/$_dir/"
  fi
}

lftp_ca_options() {
  local id=$1
  local opt=""

  # Change to a directory where the user 'haut' has write permissions
  opt="lcd $DSAS_HAUT;"

  if [ "$TYP" == "haut" ]; then
    opt="$opt set sftp:auto-confirm true; set net:timeout 60; set net:max-retries 3;" 
    if [ "$clamav" == "1" ]; then
      # Set ClamAV User-Agent including our ClamAV client UUID to get around anti DDOS protections
      uuid=$(xmllint --xpath "string(dsas/config/antivirus/uuid)" "$CONF")
      opt="$opt set http:user-agent 'CVDUPDATE/1.0.2 ($uuid)'; "
    fi

    # Setup the LFTP CA if needed. If ClamAv force self_signed for now
    # ClamAV signatures are verified elsewhere before use
    [ "$clamav" == "1" ] && ca_finger="self"
    [ "$clamav" == "1" ] || ca_finger=$(xmllint --xpath "string(dsas/tasks/task[$id]/ca/fingerprint)" $CONF)

    case $ca_finger in
      "")  : ;;
      "self") opt="$opt set ssl:verify-certificate false;" ;;
      *)
        idx=$(get_certificate $ca_finger)
        cp /tmp/cert.$$ $_ldir/tmp/cert.$$
        chmod 644 $_ldir/tmp/cert.$$
        [ -z "$idx" ] || opt="$opt set ssl:ca-file /tmp/cert.$$; "
        ;;
    esac
  fi
  echo $opt
}

getclamav() {
  local uri
  local dir="ClamAV"
  local name="ClamAV"
  local opt=$(lftp_ca_options)

  # Return if antivirus is not active
  [ "$(xmllint --xpath "string(dsas/config/antivirus/active)" "$CONF")" == "true" ] || return

  if [ "$TYP" == "haut" ]; then
    uri=$(xmllint --xpath "string(dsas/config/antivirus/uri)" "$CONF") 
  else
    local _uri="$DSAS_HOME/bas"
    _uri=${DSAS_BAS:${#_uri}}
    uri="sftp://bas:@$INTERCO_HAUT$_uri/$dir/"
  fi
  if [ -z "$uri" ]; then
    # The URI can be empty. gracefully exit
    myecho "Empty uri for task $name"
    return
  fi

  # Create directory if needed
  [ -d "${DSAS_HAUT}/$dir" ] || $as_haut mkdir -m 770  -p "${DSAS_HAUT}/$dir"

  # Download the CVD files. Can't mirror as can't do ls on directory database.clamav.net 
  for _file in main.cvd daily.cvd bytecode.cvd; do
    [ "$verbose" -eq 0 ] && $chroot_lftp -c "$opt get -e '$uri/$_file' -o '$DSAS_HAUT/$dir/$_file'" >& /dev/null
    [ "$verbose" -eq 0 ] || $chroot_lftp -c "$opt get -e '$uri/$_file' -o '$DSAS_HAUT/$dir/$_file'"
  done

  # Correct directory permissions
  $as_haut find "$DSAS_HAUT/$dir" -type d -exec chmod 770 {} \;

  [ -f "/tmp/cert.$$" ] && rm /tmp/cert.$$
  [ -f "$_ldir/tmp/cert.$$" ] &&  rm $_ldir/tmp/cert.$$

  exit 0
}

getdirectory() {
  local isdir
  local id=$1
  local uri=$(get_uri $id)
  local dir=$(xmllint --xpath "string(dsas/tasks/task[$id]/directory)" "$CONF")
  local name=$(xmllint --xpath "string(dsas/tasks/task[$id]/name)" "$CONF")
  local opt=$(lftp_ca_options $id)

  if [ -z "$uri" ]; then
    # The URI can be empty. gracefully exit
    myecho "Empty uri for task $name"
    return
  fi

  # Create directory if needed
  [ -d "${DSAS_HAUT}/$dir" ] || $as_haut mkdir -m 770 -p "${DSAS_HAUT}/$dir"

  # Test whether we have a file or a directory, and fail if server not found 
  _stderr=$(2>&1 $chroot_lftp -c "$opt open '$uri'") && isdir="1"
  echo $_stderr | grep -q "Fatal" && { 1>&2 echo "Fatal: Server '$uri' not found"; exit 1; }

  if [ -z "$isdir" ]; then
    myecho "Downloading file : $(basename "$uri")"
    # FIXME shouldn't always download here !!!
    [ "$verbose" -eq 0 ] && ($chroot_lftp -c "$opt mget -e -O '${DSAS_HAUT}/${dir}' '$uri'" >& /dev/null)
    [ "$verbose" -eq 0 ] || ($chroot_lftp -c "$opt mget -e -O '${DSAS_HAUT}/${dir}' '$uri'")
  else
    myecho "Mirroring site : $uri"
    [ "$verbose" -eq 0 ] && ($chroot_lftp -c "$opt open '$uri'; mirror --delete-first -e -O '$DSAS_HAUT/$dir'" >& /dev/null)
    [ "$verbose" -eq 0 ] || ($chroot_lftp -c "$opt open '$uri'; mirror --delete-first -e -O '$DSAS_HAUT/$dir'")

    # Correct directory permissions
    $as_haut find "$DSAS_HAUT/$dir" -type d -exec chmod 770 {} \;
  fi

  [ -f "/tmp/cert.$$" ] && rm /tmp/cert.$$
  [ -f "$_ldir/tmp/cert.$$" ] &&  rm $_ldir/tmp/cert.$$

  # There might be empty directories lying about. Remove them. Don't include include in the "for" loop
  # As there is a problem with IFS and potential directories with spaces.
  _dirs=$($as_haut find "$DSAS_HAUT/$dir" -mindepth 1 -type d -exec echo -n -e "{}\x03" \; )
  OLD_IFS=$IFS
  IFS=$'\3'
  for _dir in $_dirs;  do
    [ "$as_haut ls -A '$_dir'" ] || $as_haut rmdir "$_dir"
  done
  IFS=$OLD_IFS

  exit 0
}

get_packages() {
  local file chktype chksum
  local dest="$1"
  local uri="$2"
  local opt="$3"
  shift 3
  while [ "$#" -gt 2 ]; do
    if [ "${1: -3}" == "rpm" ]; then
      file=$1
      chktype=$2
      chksum=$3
    else
     file=$3
     chktype=$1
     chksum=$2
    fi
    if $as_haut [ -f "$dest/$file" ]; then
      if check_checksum "$dest/$file" $chksum $chktype; then
        # Checksum of file is different redownload the file
        myecho "Downloading file $file [Checksum different!!]"
        if [ "$dryrun" == "0" ]; then
          [ -d "$(dirname "$dest/$file")" ] || $as_haut mkdir -m 770 -p $(dirname "$dest/$file")
          [ "$verbose" -eq 0 ] && $chroot_lftp -c "$opt get -e '$uri/$file' -o '$dest/$file'" >& /dev/null
          [ "$verbose" -eq 0 ] || $chroot_lftp -c "$opt get -e '$uri/$file' -o '$dest/$file'"
        fi
      fi
    else
      myecho "Downloading file $file"
      if [ "$dryrun" == "0" ]; then
        [ -d "$(dirname "$dest/$file")" ] || $as_haut mkdir -m 770  -p $(dirname "$dest/$file")
        [ "$verbose" -eq 0 ] && $chroot_lftp -c "$opt get -e '$uri/$file' -o '$dest/$file'" >& /dev/null
        [ "$verbose" -eq 0 ] || $chroot_lftp -c "$opt get -e '$uri/$file' -o '$dest/$file'"
      fi
    fi
    shift 3
  done
}

getrepo() {
  local i filelist chksum chktype filetable _file
  local id=$1
  local uri=$(get_uri $id)
  local dir=$(xmllint --xpath "string(dsas/tasks/task[$id]/directory)" "$CONF")
  local name=$(xmllint --xpath "string(dsas/tasks/task[$id]/name)" "$CONF")
  local type=$(xmllint --xpath "string(dsas/tasks/task[$id]/type)" "$CONF")
  local opt=$(lftp_ca_options $id)

  case $type in
    repomd|rpm)
       # Create the destination directory if needed
       $as_haut [ -d "$DSAS_HAUT/$dir" ] || $as_haut mkdir -m 770  -p "$DSAS_HAUT/$dir"

       myecho "Downloading repodata/repomd.xml from $name"
       $as_haut [ -d "$DSAS_HAUT/$dir/repodata" ] || $as_haut mkdir -m 770 -p "$DSAS_HAUT/$dir/repodata"

       _stderr=$(2>&1 $chroot_lftp -c "$opt get -e '$uri/repodata/repomd.xml' -o '$DSAS_HAUT/$dir/repodata/repomd.xml'")
       echo $_stderr | grep -q "Fatal" && { 1>&2 echo "Fatal: Server '$uri' not found"; exit 1; }
       echo $_stderr | grep -q "failed" && { 1>&2 echo "Fatal: file '$uri/repodata/repomd.xml' not found"; exit 1; }

       [ "$type" == "rpm" ] || $chroot_lftp -c "$opt get -e '$uri/repodata/repomd.xml.asc' -o '$DSAS_HAUT/$dir/repodata/repomd.xml.asc'" >& /dev/null

       # Remove files in repodata not listed in repomd.xml
       for _file in $($as_haut find "$DSAS_HAUT/$dir/repodata" -type f) ; do
         _f=$(basename $_file)
         [[ "$_f" =~ "repomd.xml" ]] && continue
         $as_haut grep -q "$_f" "$DSAS_HAUT/$dir/repodata/repomd.xml" >& /dev/null && continue
         myecho "Removing stale file repodata/${_f}"
         $as_haut rm -f "$_file"
       done

       # Identify all files listed in repomd.xml and download them
       i=1
       while :; do
         # Note that we have to ignore the xml namespace (initial cat/sed)
         f=$($as_haut cat "$DSAS_HAUT/$dir/repodata/repomd.xml" | \
             sed -e "s:repomd xmlns:repomd ignore:g" | \
             xmllint --xpath "string(//repomd/data[$i]/location/@href)" -)
         [ -z "$f" ] && break
         chksum=$($as_haut cat "$DSAS_HAUT/$dir/repodata/repomd.xml" | \
             sed -e "s:repomd xmlns:repomd ignore:g" | \
             xmllint --xpath "string(//repomd/data[$i]/checksum)" - )
         chktype=$($as_haut cat "$DSAS_HAUT/$dir/repodata/repomd.xml" | \
             sed -e "s:repomd xmlns:repomd ignore:g" | \
             xmllint --xpath "string(//repomd/data[$i]/checksum/@type)" - )

         # Download if checksum different
         if $as_haut [ ! -f "$DSAS_HAUT/$dir/$f" ] ||
             check_checksum "$DSAS_HAUT/$dir/$f" $chksum $chktype; then
           myecho "Downloading file $f listed in repomd.xml for $name"
           [ "$verbose" -eq 0 ] && $chroot_lftp -c "$opt get -e '$uri/$f' -o '$DSAS_HAUT/$dir/$f'" >& /dev/null
           [ "$verbose" -eq 0 ] || $chroot_lftp -c "$opt get -e '$uri/$f' -o '$DSAS_HAUT/$dir/$f'"

           # Verify its checksum
           if check_checksum "$DSAS_HAUT/$dir/$f" $chksum $chktype; then
               1>&2 echo "Error verifiying checksum of $f"
           fi
         fi
         i=$(($i + 1))
       done

       # Identify the primary file list and download it
       # Note that we have to ignore the xml namespace (initial cat/sed)
       filelist=$($as_haut cat "$DSAS_HAUT/$dir/repodata/repomd.xml" | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/location/@href)' - )

       # Recover a table of the hashtype, hash and file names
       if [[ "$filelist" =~ ".*.gz" ]] || [[ "$filelist" =~ ".*.bz2" ]]; then
         filetable=$($as_haut zcat "$DSAS_HAUT/$dir/$filelist" | \
            sed -e "s/xmlns=/ignore=/g" | \
            xmllint --xpath '//package[@type="rpm"]/location | //package[@type="rpm"]/checksum' - | \
            sed -e 's:.*href="\(.*\)"/>$:\1:g' \
              -e 's:.*type="\([^"]*\)"[^>]*>\([0-9a-fA-F]*\)</checksum>:\1 \2:g')
       else
         filetable=$($as_haut cat "$DSAS_HAUT/$dir/$filelist" | \
            sed -e "s/xmlns=/ignore=/g" | \
            xmllint --xpath '//package[@type="rpm"]/location | //package[@type="rpm"]/checksum' - | \
            sed -e 's:.*href="\(.*\)"/>$:\1:g' \
              -e 's:.*type="\([^"]*\)"[^>]*>\([0-9a-fA-F]*\)</checksum>:\1 \2:g')
       fi

       # Remove the files in our tree not listed in primary.xml
       _str="$DSAS_HAUT/$dir"
       _len=$((${#_str} + 1))
       for _file in $($as_haut find "$DSAS_HAUT/$dir" -path "$DSAS_HAUT/$dir/repodata" -prune -type f -o -type f) ; do
         if [[ "$filetable" != "*${_file:$_len}*" ]]; then
           myecho "Removing stale file ${_file:$_len}"
           $as_haut rm -f "$_file"
         fi
       done

       # Download the packages
       get_packages "$DSAS_HAUT/$dir" "$uri" "$opt" $filetable
       ;;
    *) 1>&2 echo "Unrecognized repositiory check type $check"; exit 1; ;;
  esac

  [ -f "/tmp/cert.$$" ] && rm /tmp/cert.$$
  [ -f "$_ldir/tmp/cert.$$" ] &&  rm $_ldir/tmp/cert.$$

  exit 0
}

getdeb() {
  local chktyp inhash hashtyp _hash _hash_md5 _hash_sha256 _size _file
  local pool pool_local have_pool packages inpackage archs i _arch _f
  local id=$1
  local uri=$(get_uri $id)
  local dir=$(xmllint --xpath "string(dsas/tasks/task[$id]/directory)" $CONF)
  local name=$(xmllint --xpath "string(dsas/tasks/task[$id]/name)" $CONF)
  local type=$(xmllint --xpath "string(dsas/tasks/task[$id]/type)" $CONF)
  local opt=$(lftp_ca_options $id)

  case $type in
    deb)
       # Create the destination directory if needed
       $as_haut [ -d "$DSAS_HAUT/$dir" ] || $as_haut mkdir -m 770 -p $DSAS_HAUT/$dir

       # Test server ok before continuing
       _stderr=$(2>&1 $chroot_lftp -c "$opt open '$uri/'")
       echo $_stderr | grep -q "Fatal" && (1>&2 echo "Fatal: Server '$uri' not found"; exit 1)

       myecho "Downloading Release/Release.gpg from $name"
       if [ "$verbose" -eq 0 ]; then
         $chroot_lftp -c "$opt get -e '$uri/Release' -o '$DSAS_HAUT/$dir/Release'" >& /dev/null
         $chroot_lftp -c "$opt get -e '$uri/Release.gpg' -o '$DSAS_HAUT/$dir/Release.gpg'" >& /dev/null
         $chroot_lftp -c "$opt get -e '$uri/InRelease' -o '$DSAS_HAUT/$dir/InRelease'" >& /dev/null
       else
         $chroot_lftp -c "$opt get -e '$uri/Release' -o '$DSAS_HAUT/$dir/Release'"
         $chroot_lftp -c "$opt get -e '$uri/Release.gpg' -o '$DSAS_HAUT/$dir/Release.gpg'"
         $chroot_lftp -c "$opt get -e '$uri/InRelease' -o '$DSAS_HAUT/$dir/InRelease'"
       fi

       $as_haut [ -f "$DSAS_HAUT/$dir/Release" ] || $(1>&2 echo "Failed to download 'Release'"; exit 1)
       $as_haut [ -f "$DSAS_HAUT/$dir/Release.gpg" ] || $(1>&2 echo "Failed to download 'Release.gpg'"; exit 1)

       # Find the pool directory
       pool=$(dirname "$uri")
       pool_local=$(dirname "$dir")
       have_pool="0"
       while [ -n "$pool" ] && [ "${pool: -3}" != "://" ]; do
         $chroot_lftp -c "$opt open '$pool/pool'" >& /dev/null && have_pool="1" && break
         pool=$(dirname "$pool")
         pool_local=$(dirname "$pool_local")
       done
       [ "$have_pool" == "0" ] && { 1>&2 echo "Debian pool directory not found"; exit 1; }

       # Identify if the Release file has SHA256 et/ou MD5 hashes
       $as_haut grep -qx "MD5Sum:" "$DSAS_HAUT/$dir/Release" && hashtyp="MD5Sum:" && chktyp="md5"
       $as_haut grep -qx "SHA1:" "$DSAS_HAUT/$dir/Release" && hashtyp="SHA1:" && chktyp="sha"
       $as_haut grep -qx "SHA256:" "$DSAS_HAUT/$dir/Release" && hashtyp="SHA256:" && chktyp="sha256"

       # Get the desired archiectures to download
       archs=""
       i=1
       while :; do
         _arch=$(xmllint --xpath "string(dsas/tasks/task[$id]/archs/arch[$i])" $CONF)
         [ -z "$_arch" ] && break;
         archs="$archs $_arch"
         i=$((i + 1))
       done 
       
       # Identify all files listed in Release and download them
       inhash=0
       $as_haut cat $DSAS_HAUT/$dir/Release | while read -r line; do
         # Assume that each hash is listed after the correct flag and has
         # a leading space
         [ "$inhash" == "0" ] && [[ "$line" =~ "^$hashtyp$" ]] && inhash="1" && continue
         [ "$inhash" == "1" ] && [[ "$line" =~ ":$" ]] && inhash="0" && continue
         [ "$inhash" == "0" ] && continue

         IFS=' ' read _hash _size _file << EOF
$line
EOF
         # Only download Package, Package.gz and Package.xz files if desired architecture 
         _f=$(basename $_file)
         if [ "$_f" == "Release" ] || [ "$_f" == "Packages" ] || [ "$_f" == "Packages.gz" ] || [ "$_f" == "Packages.xz" ]; then
           _f=$(dirname $_file)
           [[ "$archs" =~ "${_f##*-}" ]] || continue
         fi

         # Only download Contents* files if desired architecture
         _f=$(basename $_file)
         if [ "${_f:0:8}" == "Contents" ]; then
           _arch=${_f:9}
           _arch=${_arch#*udeb-}
           _arch=${_arch%%.gz}
           _arch=${_arch%%.xz}
           [[ "$archs" =~ "$_arch" ]] || continue
         fi

         # Only download installers if desired architecture
         _f=${_file##/}
         _f=$(echo $_f | cut -d/ -f2)
         if [ "${_f:0:9}" == "installer" ]; then
           _arch=${_f:10}
           [[ "$archs" =~ "$_arch" ]] || continue
         fi

         if $as_haut [ -f "$DSAS_HAUT/$dir/$_file" ]; then
           if check_checksum "$DSAS_HAUT/$dir/$_file" $_hash $chktyp; then
             myecho "Downloading file $_file [Checksum different!!]"
             [ "$verbose" -eq 0 ] && $chroot_lftp -c "$opt get -e '$uri/$_file' -o '$DSAS_HAUT/$dir/$_file'" >& /dev/null
             [ "$verbose" -eq 0 ] || $chroot_lftp -c "$opt get -e '$uri/$_file' -o '$DSAS_HAUT/$dir/$_file'"
           fi
         else
           myecho "Downloading file $_file"
           [ -d "$(dirname "$DSAS_HAUT/$dir/$_file")" ] || $as_haut mkdir -m 770 -p "$(dirname "$DSAS_HAUT/$dir/$_file")"
           [ "$verbose" -eq 0 ] && $chroot_lftp -c "$opt get -e '$uri/$_file' -o '$DSAS_HAUT/$dir/$_file'" >& /dev/null
           if [ "$verbose" -ne 0 ]; then
             # Only print verbose for uncompressed files without compressed versions. Debian
             # doesn't always have uncompressed versions if compressed versions exist
             if [[ "$_file" == "*.gz" ]] ||  [[ "$_file" == "*.xz" ]] ||  [[ "$_file" == "*.bz2" ]]; then
               $chroot_lftp -c "$opt get -e '$uri/$_file' -o '$DSAS_HAUT/$dir/$_file'"
             elif $as_haut grep $_file $DSAS_HAUT/$dir/Release | grep -o "...$" | grep -q ".gz\|.xz\|bz2"; then
               $chroot_lftp -c "$opt get -e '$uri/$_file' -o '$DSAS_HAUT/$dir/$_file'" >& /dev/null
             else
               $chroot_lftp -c "$opt get -e '$uri/$_file' -o '$DSAS_HAUT/$dir/$_file'"
             fi
           fi
         fi
       done

       # For each file Packages.gz, and maybe Sources.gz, download the listed files 
       # into the pool directory
       packages=$($as_haut find "$DSAS_HAUT/$dir" -name "Packages.gz")
       [[ "$archs" =~ "source" ]] && packages="$packages $($as_haut find "$DSAS_HAUT/$dir" -name "Sources.gz")"
       for package in $packages ; do
         myecho "Downloading files from $package"
         inpackage=0
         _file=""
         _hash_md5=""
         _hash_sha256=""
         $as_haut zcat "$package" | while read -r line; do
           # Use sed to strip leading and trailing space, as can't used xargs due to possible
           # illegal characters like single quotes in strings. 
           [[ "$line" =~ "Filename:" ]] && _file="$(echo $line | cut -d: -f2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')" && continue
           [[ "$line" =~ "MD5sum:" ]] && _hash_md5="$(echo $line | cut -d: -f2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')" && continue
           [[ "$line" =~ "SHA256:" ]] && _hash_sha256="$(echo $line | cut -d: -f2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')" && continue
           if [ -z "$(echo $line | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')" ]; then
             if $as_haut [ -f "$DSAS_HAUT/$pool_local/$_file" ]; then
               if [ -n "$_hash_sha256" ]; then
                 check_checksum "$DSAS_HAUT/$pool_local/$_file" $_hash_sha256 sha256
               else 
                 check_checksum "$DSAS_HAUT/$pool_local/$_file" $_hash_md5 md5
               fi
               
               if [ "$?" -eq 0 ]; then
                 myecho "Downloading file $_file [Checksum different!!]"
                 [ "$verbose" -eq 0 ] && $chroot_lftp -c "$opt get -e '$pool/$_file' -o '$DSAS_HAUT/$pool_local/$_file'" >& /dev/null
                 [ "$verbose" -eq 0 ] || $chroot_lftp -c "$opt get -e '$pool/$_file' -o '$DSAS_HAUT/$pool_local/$_file'"
               fi
             elif [ -n "$_file" ]; then
               myecho "Downloading file $_file"
               [ -d "$(dirname "$DSAS_HAUT/$pool_local/$_file")" ] || $as_haut mkdir -m 770 -p "$(dirname "$DSAS_HAUT/$pool_local/$_file")"
               [ "$verbose" -eq 0 ] && $chroot_lftp -c "$opt get -e '$pool/$_file' -o '$DSAS_HAUT/$pool_local/$_file'" >& /dev/null
               [ "$verbose" -eq 0 ] || $chroot_lftp -c "$opt get -e '$pool/$_file' -o '$DSAS_HAUT/$pool_local/$_file'"
             fi
             _file=""
             _hash_md5=""
             _hash_sha256=""
           fi
         done
       done

       ;;

     *) 1>&2 echo "Unknown file checking type"; exit 1; ;;
  esac

  [ -f "/tmp/cert.$$" ] && rm /tmp/cert.$$
  [ -f "$_ldir/tmp/cert.$$" ] &&  rm $_ldir/tmp/cert.$$

  exit 0
}

help() {
  echo "Usage: $(basename $0)  [Options] ID"
  echo "Get files given by the task ID"
  echo "     -v|--verbose    Log all files verified"
  echo "     -q|--quiet      Log only files failing to verify"
  echo "     -n|--dryrun     Perform minimum actions"
  echo "     -c|--clamav     Get ClamAv signature files"
  echo "     -?|-h|--help    Print this help"
}

clamav=0

# Parse options
ids=""
while [ "$#" -gt 0 ]; do
  case $1 in
    -v|--verbose) verbose=1 ;;
    -q|--quiet) verbose=0 ;;
    -n|--dryrun) dryrun=1 ;;
    -c|--clamav) clamav=1 ;;
    -?|-h|--help) help; exit 0 ;;
    -*) 1>&2 echo "Unrecognized option : $1"; help; exit 1 ;;
     *)
       # Only allow a single task to be able to exit en error correctly 
       [ -n "$ids" ] && { 1>&2 echo "Only a single task is allowed"; exit 1; }
       ids="$ids $1" ;;
  esac
  shift 1
done

# Check existence of DSAS directories
[ -d $DSAS_HOME ] || { echo "DSAS home directory missing"; exit 1; }
$as_haut [ -d "$DSAS_HAUT" ] || { echo "DSAS haut directory missing"; exit 1; }

# If dryrun, force verbose
[ $dryrun -ne 0 ] && verbose=1

# If ClamAV download request do it now and exit
[ "$clamav" == "1" ] && (getclamav; exit 0)

# Check that all ids are valid before doing anything
idx=""
for _id in $ids; do
  if [ ${#_id} -lt 5 ] && [[ $_id =~ ^[0-9]+$ ]]; then
    _idx=$(xmllint --xpath "string(dsas/tasks/task[$_id]/id)" $CONF)
    [ -z "$_idx" ] && { 1>&2 echo "Task id ($_id) does not exist"; exit 1; }
    idx="$idx $_id"
  else
    _idx=$(task_id_to_idx $_id)
    [ $? -ne 0 ] && { 1>&2 echo "Task id ($_id) does not exist"; exit 1; }
    idx="$idx $_idx"
  fi
done

for _idx in $idx; do
  type=$(xmllint --xpath "string(dsas/tasks/task[$_idx]/type)" $CONF)
  case $type in
    rpm|repomd) getrepo $_idx; ;;
    deb) getdeb $_idx; ;;
    authenticode|openssl|gpg|liveupdate|cyberwatch) getdirectory $_idx; ;;
    *) 1>&2 echo "Unknown task type : $type"; exit 1; ;;
  esac
done


#! /bin/sh

if [ -f "$(dirname $0)/dsas_common.sh" ]; then
  . $(dirname $0)/dsas_common.sh
else
  echo "Common functions not found !!"
  exit -1
fi

getdirectory() {
  local dirlist files file
  local id=$1
  local uri=$(get_uri $id)
  local dir=$(xmllint --xpath "string(dsas/tasks/task[$id]/directory)" $CONF)
  local name=$(xmllint --xpath "string(dsas/tasks/task[$id]/name)" $CONF)


  if [ -z "$uri" ]; then
    myecho "Empty Uri for task $name"
    return
  fi

  # Create directory if needed
  [ -d ${DSAS_HAUT}/$dir ] || $(umask 007 && mkdir -p ${DSAS_HAUT}/$dir)

  # If no trailing "/" or "\" assume we have a file and not a directory
  # Special case for scp, because it can only have one file
  if [ "${uri:0:4}" == "scp:" ] || ([ "${uri: -1}" != "/" ] &&  [ "${uri: -1}" == "\\" ]); then
    myecho "Downloading file: $(basename $uri)"
    get "${uri}" "${DSAS_HAUT}/${dir}/${basename $uri}"
  else
    files=$(get_dirlist $uri)

    # Remove files locally that are no longer available sur le URI
    for file in $(ls -1 $DSAS_HAUT/$dir); do
      # Ignore directories for now
      [ "${file: -1}" == "/" ] && continue
      
      if [[ "$files" != *"$file"* ]]; then
        myecho "Removing stale file: $file"
        rm $DSAS_HAUT/$dir/$file
      fi
    done

    # Download the missing files
    for file in $files; do
      # Ignore directories for now
      [ "${file: -1}" == "/" ] && continue
      if [ ! -f "$DSAS_HAUT/$dir/$file" ]; then
        myecho "Downloading file: $file"
        get "${uri}${file}" "${DSAS_HAUT}/${dir}/${file}"
      fi
    done
  fi
}

get_packages() {
  local file chktype chksum
  local dest=$1
  local uri=$2
  shift 2
  while [ "$#" -gt 2 ]; do
    if [ ${1: -3} == "rpm" ]; then
      file=$1
      chktype=$2
      chksum=$3
    else
     file=$3
     chktype=$1
     chksum=$2
    fi
    if [ -f "$dest/$file" ]; then
      if check_checksum $dest/$file $chksum $chktype; then
        # Checksum of file is different redownload the file
        myecho "Downloading file $file [Checksum different!!]"
        [ -d "$(dirname $dest/$file)" ] || $(umask 007 && mkdir -p $(dirname $dest/$file))
        get $uri/$file $dest/$file
      else
        myecho "Skipping file $file"
      fi
    else
      myecho "Downloading file $file"
      [ -d "$(dirname $dest/$file)" ] || $(umask 007 && mkdir -p $(dirname $dest/$file))
      get $uri/$file $dest/$file
    fi
    shift 3
  done
}

getrepo() {
  local filelist chksum chktype unzipfile filetable _file
  local id=$1
  local uri=$(get_uri)
  local dir=$(xmllint --xpath "string(dsas/tasks/task[$id]/directory)" $CONF)
  local name=$(xmllint --xpath "string(dsas/tasks/task[$id]/name)" $CONF)
  local type=$(xmllint --xpath "string(dsas/tasks/task[$id]/type)" $CONF)

  case $type in
    repomd|rpm)
       # Create the destination directory if needed
       [ -d "$DSAS_HAUT/$dir" ] || $(umask 007 && mkdir -p $DSAS_HAUT/$dir)

       myecho "Downloading repodata/repomd.xml from $name"
       [ -d $DSAS_HAUT/$dir/repodata ] || $(umask 007 && mkdir -p $DSAS_HAUT/$dir/repodata)

       get -force "$uri/repodata/repomd.xml" "$DSAS_HAUT/$dir/repodata/repomd.xml" 
       [ "$type" == "rpm" ] || get -force "$uri/repodata/repomd.xml.asc" "$DSAS_HAUT/$dir/repodata/repomd.xml.asc" 

       # Identify the primary file list and download it
       # Note that we have to ignore the xml namespace (initial cat/sed)
       filelist=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/location/@href)' - )
       myecho "Downloading primary file list $filelist for $name"
       get -force "$uri/$filelist" "$DSAS_HAUT/$dir/$filelist"

       # Verify its checksum
       chksum=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/checksum)' - )
       chktype=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/checksum/@type)' - )
       if  check_checksum $DSAS_HAUT/$dir/$filelist $chksum $chktype; then
         2>1 echo "Error verifying checksum of $filelist"
         return
       fi

       # Unzip and verify the checksum of primary.xml
       chksum=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
          sed -e "s:repomd xmlns:repomd ignore:g" | \
          xmllint --xpath 'string(//repomd/data[@type="primary"]/open-checksum)' - )
       chktype=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
          sed -e "s:repomd xmlns:repomd ignore:g" | \
          xmllint --xpath 'string(//repomd/data[@type="primary"]/open-checksum/@type)' - )
       unzipfile=$(echo $filelist | sed -e "s/.gz//g")
       gunzip -k -f $DSAS_HAUT/$dir/$filelist
       if  check_checksum $DSAS_HAUT/$dir/$unzipfile $chksum $chktype; then
         2>1 echo "Error verifying checksum of $unzipfile"
         return
       fi

       # Recover a table of the hashtype, hash and file names
       filetable=$(cat $DSAS_HAUT/$dir/$unzipfile | \
          sed -e "s/xmlns=/ignore=/g" | \
          xmllint --xpath '//package[@type="rpm"]/location | //package[@type="rpm"]/checksum' - | \
          sed -e 's:.*href="\(.*\)"/>$:\1:g' \
            -e 's:.*type="\([^"]*\)"[^>]*>\([0-9a-fA-F]*\)</checksum>:\1 \2:g')

       # Remove the files in our tree not listed in primary.xml
       for _file in $(cd $DSAS_HAUT/$dir; find . -path ./repodata -prune -type f -o -type f); do
         if [[ "$filetable" != *"${_file:2}"* ]]; then
           myecho "Removing stale file ${_file:2}"
           rm $DSAS_HAUT/$dir/${_file:2}
         fi
       done

       # Download the packages
       get_packages "$DSAS_HAUT/$dir" $uri $filetable
       ;;
    *) echo "Unrecognized repositiory check type $check"; ;;
  esac
}

help() {
  echo "Usage: $(basename $0)  [Options] ID [ID...]"
  echo "Get files given by the task ID(s)"
  echo "     -v|--verbose    Log all files verified"
  echo "     -q|--quiet      Log only files failing to verifiy"
  echo "     -n|--dryrun     Perform no actions"
  echo "     -?|-h|--help    Print this help"
}

check_dsas

# Parse options
ids=""
while [ "$#" -gt 0 ]; do
  case $1 in
    -v|--verbose) verbose=1 ;;
    -q|--quiet) verbose=0 ;;
    -n|--dryrun) dryrun=1 ;;
    -?|-h|--help) help; exit 0 ;;
    -*) 1>&2 echo "Unrecognized option : $1"; help; exit 1 ;;
    *) ids="$ids $1" ;;
  esac
  shift 1
done

# If dryrun, force verbose
[ $dryrun -ne 0 ] && verbose=1

# Check that all ids are valid before doing anything
idx=""
for _id in $ids; do
  task_id_to_idx $_id
  _idx=$?
  [ $_idx -lt 1 ] && (echo "Task id ($_id) does not exist"; exit -1)
  idx="$idx $_idx"
done

for _idx in $idx; do
  type=$(xmllint --xpath "string(dsas/tasks/task[$_idx]/type)" $CONF)
  case $type in
    rpm|repomd) getrepo $_idx; ;;
    deb) echo "DEB files are not yet implemented"; continue; ;;
    authenticode|openssl|gpg) getdirectory $_idx; ;;
    *) echo "Unknown task type : $type"; ;;
  esac
done


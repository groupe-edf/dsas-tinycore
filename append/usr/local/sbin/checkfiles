#! /bin/sh

if [ -f "usr/local/sbin/dsas_common.sh" ]; then
  . /usr/local/share/sbin/dsas_common.sh
elif [ -f "/home/tc/dsas---tinycore/append/usr/local/sbin/dsas_common.sh" ]; then
  # FIXME For testing purposes. Delete ?
  . /home/tc/dsas---tinycore/append/usr/local/sbin/dsas_common.sh
else
  echo "Common functions not found !!"
  exit -1
fi


# Default options

logfile="verif.log"
rotatemax=6
rotate=0
reject=reject
UMASK=640


help() {
  echo "Usage: $(basename $0)  [Options] ID [ID...]"
  echo "Verify files given by the task ID."
  echo "     -v|--verbose    Log all files verified"
  echo "     -q|--quiet      Log only files failing to verifiy"
  echo "     -r|--rotate     Rotate the log files"
  echo "     -n|--dryrun     Perform no actions"
  echo "     -s|--stdout     Send logs to stdout"
  echo "     -l|--log        Send the logs to a file"
  echo "     -o <FILE>       Log to <FILE>, default $logfile"
  echo "     --out=<FILE>    Log to <FILE>"
  echo "     -?|-h|--help    Print this help"
}

rotatelogs() {
  [ -f "${logfile}.$rotatemax" ] && rm "${logfile}.$rotatemax"
  for i in $(seq $rotatemax -1 2); do
    [ -f "${logfile}.$((i-1))" ] && mv "${logfile}.$((i-1))" "${logfile}.$i"
  done
  [ -f "${logfile}" ] && mv "${logfile}" "${logfile}.1"
  exit 0
}

# For the moment this function is dead code. Remove ?
iswindowsfile() {
  # FIXME Is this list complete ?
  case '$1' in
    application/x-dosexec | \
    application/vnd.ms-cab-compressed | \
    application/x-ms-application | \
    application/x-ms-installer | \
    application/x-windows-installer | \
    application/x-msi | \
    application/vnd.microsoft.portable-executable)
      retval=1
      ;;
    *) retval=0 ;;
  esac
  return $retval
}

verifauthenticode(){
  local id1=$1
  local file=$2
  local ca=$3
  local id=""

  if [ -z $ca ]; then
    retossl=$(osslsigncode verify $file 2>&1) || return $?
  else
    retossl=$(osslsigncode verify -CAfile /tmp/tmpcert $file 2>&1) || return $?
  fi

  for _id in $(xmllint --xpath "dsas/tasks/task[@id='$id1']/cert/@id" $conf); do
    eval $_id
    _type=$(xmllint --xpath "string(dsas/tasks/task[@id='$id1']/cert[@id='$id']/@type)" $conf)
    case $_type in
      ca) continue ;;
      intermediate)
        fingerprint=$(xmllint --xpath "string(dsas/tasks/task[@id='$id1']/cert[@id='$id']/@fingerprint)" $conf)
        echo $resossl | grep -q $fingerprint && return 3
        ;;
      gpg) 1>&2 echo "Can't use gpg certificates with authenticode"; return -1 ;;
      *) 1>&2 echo "Unrecognized certificate type : $_type"; return -1 ;;
    esac
  done
  return 0
}

antivirus() {
  # FIXME Add something here. For now just flag everything as bad
  return 4
}

verifdirectory() {
  local id=$1
  local dir=$(xmllint --xpath "string(dsas/tasks/task[$id]/directory)" $conf)
  local type=$(xmllint --xpath "string(dsas/tasks/task[$id]/type)" $conf)

  # Validate check type
  case $type in
    authenticode|antivirus) : ;;
    *) 1>&2 echo "Unknown file checking type"; return 1 ;;
  esac

  # Create directory if needed
  [ -d $bas/$dir ] || mkdir -p $bas/$dir

  # Remove the files in our tree $bas and not in $haut.
  filetable=$(ls -1 $haut/$dir)
  for _file in $(cd $bas/$dir; find . -type f); do
    if [[ "$filetable" != *"${_file:2}"* ]]; then
      echo "Removing stale file ${_file:2}"
      rm $bas/$dir/${_file:2}
    fi
  done

  ca=$(xmllint --xpath "string(dsas/tasks/task[@id='$id1']/cert[@type='ca'])" $conf)
  [ -z "$ca" ] || $(echo "$ca" > /tmp/tmpcert; ca="/tmp/tmpcert")

  for file in $(cd $haut; find $dir -type f); do
    case $type in
      authenticode) verifauthenticode $id $haut/$file $ca ;;
      antivirus) antivirus $id $haut/$file ;;
    esac
    status=$?
    msgline $haut/$file $status
    case $status in
      0) ln "$haut/$file" "$bas/$file"; ;;
      *) ln "$haut/$file" "$haut/$reject/$file"; ;;
    esac
  done

  [ -z "$ca" ] || /bin/rm /tmp/tmpcert
}

verify_packages() {
  dir=$1
  rpm_k=$2
  shift 2
  while [ "$#" -gt 2 ]; do
    if [ ${1: -3} == "rpm" ]; then
      file=$1
      chktype=$2
      chksum=$3
    else
     file=$3
     chktype=$1
     chksum=$2
    fi
    if [ -f "$haut/$dir/$file" ]; then
      if  check_checksum $haut/$dir/$file $chksum $chktype; then
        msgline $haut/$dir/$file 1
        ln $haut/$dir/$file $haut/$reject/$dir/$file
      elif [ "$rpm_k" == "1" ] && rpm -K $haut/$dir/$file 2>&1 /dev/null; then
        msgline $haut/$dir/$file 5
        ln $haut/$dir/$file $haut/$reject/$dir/$file       
      else
        msgline $haut/$dir/$file 0
        ln $haut/$dir/$file $bas/$dir/$file
      fi
    fi  # For now ignore missing files
    shift 3
  done
}

verifrepo() {
  id=$1
  check=$(xmllint --xpath "string(dsas/tasks/task[@id='$id']/check/@type)" $conf)

  # FIXME
  # Don't have rpm binary yet so, fail for rpm tests
  case $check in
    rpm) echo "Check RPM files is not yet implemented"; return; ;;
    deb) echo "Check DEB files is not yet implemented"; return; ;;
    repomd|rpm)
      dir=$(xmllint --xpath "string(dsas/tasks/task[@id='$id']/@dir)" $conf)
      name=$(xmllint --xpath "string(dsas/tasks/task[@id='$id']/@name)" $conf)

      gpg=$(xmllint --xpath "string(dsas/tasks/task[@id='$id']/cert/@type)" $conf)
      fingerprint=$(xmllint --xpath "string(dsas/tasks/task[@id='$id']/cert/@fingerprint)" $conf)
      [ -z "$gpg" ] && $(echo "No GPG key found for RPM check"; return 1)
      gpg=$(xmllint --xpath "string(dsas/tasks/task[@id='$id']/cert)" $conf)

      if [ "$check" == "rpm" ]; then
        # FIXME Should the key be removed after use ?
        [ "$(rpm -k)" == *"$fingerprint"i* ] || echo $gpg | rpm --import 2>&1 /dev/null
      else
        # FIXME Should the key be removed after use ?
        [ "$(gpg -k)" == *"$fingerprint"* ] && echo "$gpg" | gpg --import 2>&1 /dev/null 

        # Verify the repomd.xml against the GPG signature repomd.xml.asc
        gpg --verify $haut/$dir/repodata/repomd.xml.asc \
            $haut/$dir/repodata/repomd.xml 2>&1 /dev/null || \
          $(echo "Failed to verify repomd.xml signature"; return 1)
       fi

       # Create the destination directory if needed
       [ -d $bas/$dir ] || mkdir -p $bas/$dir

       # Identify the primary file list and download it
       # Note that we have to ignore the xml namespace (initial cat/sed)
       filelist=$(cat $haut/$dir/repodata/repomd.xml | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/location/@href)' -)

       # Verify its checksum
       chksum=$(cat $haut/$dir/repodata/repomd.xml | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/checksum)' - )
       chktype=$(cat $haut/$dir/repodata/repomd.xml | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/checksum/@type)' - )
       if  check_checksum $haut/$dir/$filelist $chksum $chktype; then
	         1>&2 echo "Error verifiying checksum of $filelist"
         return
       fi

       # Unzip and verify the checksum of primary.xml
       chksum=$(cat $haut/$dir/repodata/repomd.xml | \
          sed -e "s:repomd xmlns:repomd ignore:g" | \
          xmllint --xpath 'string(//repomd/data[@type="primary"]/open-checksum)' - )
       chktype=$(cat $haut/$dir/repodata/repomd.xml | \
          sed -e "s:repomd xmlns:repomd ignore:g" | \
          xmllint --xpath 'string(//repomd/data[@type="primary"]/open-checksum/@type)' - )
       unzipfile=$(echo $filelist | sed -e "s/.gz//g")
       gunzip -k -f $haut/$dir//$filelist
       if  check_checksum $haut/$dir/$unzipfile $chksum $chktype; then
         1>&2 echo "Error verifiying checksum of $unzipfile"
         return
       fi

       # Copy repomd.xml*  and primary.xml* to $bas
       ln $haut/$dir/repodata/repomd.xml \
          $bas/$dir/repodata/repomd.xml
       ln $haut/$dir/repodata/repomd.xml.asc \
          $bas/$dir/repodata/repomd.xml.asc
       ln $haut/$dir/$filelist \
          $bas/$dir/$filelist
       ln $haut/$dir/$unzipfile \
          $bas/$dir/$unzipfile

       # Recover a table of the hashtype, hash and file names
       filetable=$(cat $haut/$dir/$unzipfile | \
          sed -e "s/xmlns=/ignore=/g" | \
          xmllint --xpath '//package[@type="rpm"]/location | //package[@type="rpm"]/checksum' - | \
          sed -e 's:.*href="\(.*\)"/>$:\1:g' \
            -e 's:.*type="\([^"]*\)"[^>]*>\([0-9a-fA-F]*\)</checksum>:\1 \2:g')

       # Remove the files in our tree $bas and not listed in primary.xml
       for _file in $(cd $bas/$dir; find . -path ./repodata -prune -type f -o -type f); do
         if [[ "$filetable" != *"${_file:2}"* ]]; then
           echo "Removing stale file ${_file:2}"
           rm $bas/$dir/${_file:2}
         fi
       done

       # Verify the packages
       [ "$check" == "rpm" ] && verify_packages $dir 1 $filetable
       [ "$check" == "rpm" ] || verify_packages $dir 0 $filetable
       ;;
  esac
}

check_dsas

# Parse options
ids=""
while [ "$#" -gt 0 ]; do
  case $1 in
    -v|--verbose) verbose=1 ;;
    -q|--quiet) verbose=0 ;;
    -r[--rotate) rotate=1 ;;
    -n|--dryrun) dryrun=1 ;;
    -s|--stdout) logstdout=1 ;;
    -l|--log) logstdout=0 ;;
    -o) logfile=$2; shift 1 ;;
    --out=*) logfile=${1#*=} ;;
    -?|-h|--help) help; exit 0 ;;
    -*) 1>&2 echo "Unrecognized option : $1"; help; exit 1 ;;
    *) ids="$ids $1" ;;
  esac
  shift 1
done

# If dryrun, force verbose
[ $dryrun -ne 0 ] && verbose=1

# Check that all ids are valid before doing anything
idx=""
for _id in $ids; do
  task_id_to_idx $_id
  _idx=$?
  [ $_idx -lt 1 ] && (echo "Task id ($_id) does not exist"; exit -1)
  idx="$idx $_idx"
done

for _id in idx; do
  type=$(xmllint --xpath "string(dsas/tasks/task[$id]/type)" $conf)
  case $type in
    rpm|repomd) verifrepo $id; ;;
    deb) echo "DEB files are  are not yet implemented"; continue; ;;
    authenticode|openssl|gpg) verifdirectory $id; ;; 
    *) echo "Unknown task type : $type"; ;;
  esac
done

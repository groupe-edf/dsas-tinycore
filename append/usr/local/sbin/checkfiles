#! /bin/sh

if [ -f "$(dirname $0)/dsas_common.sh" ]; then
  . $(dirname $0)/dsas_common.sh
else
  1>&2 echo "Common functions not found !!"
  exit -1
fi

# Default options
logfile="$(dirname $CONF)/dsas_verif.log"
UMASK=640

help() {
  echo "Usage: $(basename $0)  [Options] ID [ID...]"
  echo "Verify files given by the task ID."
  echo "     -v|--verbose    Log all files verified"
  echo "     -q|--quiet      Log only files failing to verifiy"
  echo "     -n|--dryrun     Perform no actions"
  echo "     -s|--stdout     Send logs to stdout"
  echo "     -l|--log        Send the logs to a file"
  echo "     -o <FILE>       Log to <FILE>, default $logfile"
  echo "     --out=<FILE>    Log to <FILE>"
  echo "     -?|-h|--help    Print this help"
}

verifauthenticode(){
  local fingerprint
  local id=$1
  local tempdir=$2
  local file=$3

  if [ -f "$tempdir/cert.0" ]; then
    retossl=$(osslsigncode verify -CAfile $tempdir/cert.0 $file 2>&1) || return $?
  else
    retossl=$(osslsigncode verify $file 2>&1) || return $?
  fi

  for file in $(ls $tempdir); do
    [ "$(basename $file)" == "cert.0" ] && continue
    fingerprint=$(openssl x509 -in $tempdir/$file -noout -text | grep -A1 "Subject Key Identifier" | sed -n 2p | xargs)
    echo $resossl | grep -q $fingerprint && return 3
  done
  return 0
}

verifgpg(){
  local id=$1
  local tempdir=$2
  local file=$3
  if [ "${file##.*}" == "gpg" ]; then
    gpg --no-default-keyring --keyring $tempdir/cert.0.gpg --verify $file
  else
    gpg --no-default-keyring --keyring $tempdir/cert.0.gpg --verify $file.sig $file
  fi
  return $?
}

verifopenssl(){
  local id=$1
  local tempdir=$2
  local file=$3
  openssl dgst -verify $tempdir/cert.0.gpg -keyform PEM -sha256 -signature $file.sig -binary $file
  return $?
}

verifdirectory() {
  local filetable file status i j fprint tempdir idx auth
  local id=$1
  local dir=$(xmllint --xpath "string(dsas/tasks/task[$id]/directory)" $CONF)
  local type=$(xmllint --xpath "string(dsas/tasks/task[$id]/type)" $CONF)

  # Validate check type
  case $type in
    authenticode|openssl|gpg) : ;;
    *) 1>&2 echo "Unknown file checking type"; exit 1 ;;
  esac

  tempdir=$(mktemp -d)
  i=1
  j=1
  while :; do
    fprint=$(xmllint --xpath "string(dsas/tasks/task[$id]/cert[$j]/fingerprint)" $CONF)
    [ -z "$fprint" ] && break;
    idx=$(get_certificate $fprint)
    [ -z "$idx" ] && { 1>&2 echo "Certificate used by task($id) not found !!"; exit 1; }
    if [ $idx -eq 0 ]; then
      [ -f "$tempdir/cert.0" ] && myecho "Multiple authority certificates defined" 
      /bin/mv /tmp/cert.$$ $tempdir/cert.0
    else
      auth=$(xmllint --xpath "string(dsas/certificates/certificate[$idx]/authority)" $CONF)
      if [ "$auth" == "true" ]; then
        [ -f "$tempdir/cert.0" ] && myecho "Multiple authority certificates defined"
        /bin/mv /tmp/cert.$$ $tempdir/cert.0
      else
        /bin/mv -f /tmp/cert.$$ $tempdir/cert.$((i++))
      fi
    fi
    j=$((j + 1))
  done
  if [ "$type" == "gpg" ]; then
    # Need to dearmor gpg certificate before use
    gpg --dearmor $tempdir/cert.0
  fi

  # Create directory if needed
  [ -d $DSAS_BAS/$dir ] || $(umask 007 && mkdir -p $DSAS_BAS/$dir && chgrp $grp $DSAS_BAS/$dir )

  # Remove the files in our tree bas and not in haut.
  filetable=$(ls -1 $DSAS_HAUT/$dir)
  for file in $(cd $DSAS_BAS/$dir; find . -type f); do
    if [[ "$filetable" != *"${file:2}"* ]]; then
      myecho "Removing stale file ${file:2}"
      /bin/rm -f $DSAS_BAS/$dir/${file:2}
    fi
  done

  for file in $(cd $DSAS_HAUT; find $dir -type f); do
    # If file exists in bas skip. Hardlinked, so test is fast
    [ $DSAS_HAUT/$file -ef $DSAS_BAS/$file ] && continue

    case $type in
      authenticode) verifauthenticode $id $tempdir $DSAS_HAUT/$file ;;
      openssl) 
        [ "${file##.*}" == "asc" ]  && continue 
        verifopenssl $id $tempdir $DSAS_HAUT/$file
        ;;
      gpg)
        [ "${file##.*}" == "sig" ]  && continue 
        verifgpg $id $tempdir $DSAS_HAUT/$file
        ;;
    esac
    status=$?
    msgline $DSAS_HAUT/$file $status
    if [ $status -eq 0 ]; then
      ln "$DSAS_HAUT/$file" "$DSAS_BAS/$file"
      [ "$type" == "gpg" ] && [ "${file##.*}" != "gpg" ] && ln "$DSAS_HAUT/$file.sig" "$DSAS_BAS/$file.sig"
      [ "$type" == "openssl" ] && ln "$DSAS_HAUT/$file.asc" "$DSAS_BAS/$file.asc"
    fi
  done
  /bin/rm -fr $tempdir
}

verify_packages() {
  local file chktype chksum
  local dir=$1
  local rpm_k=$2
  shift 2
  while [ "$#" -gt 2 ]; do
    if [ ${1: -3} == "rpm" ]; then
      file=$1
      chktype=$2
      chksum=$3
    else
     file=$3
     chktype=$1
     chksum=$2
    fi
    shift 3

    # If file exists in bas skip. Hardlinked, so test is fast
    [ $DSAS_HAUT/$dir/$file -ef $DSAS_BAS/$dir/$file ] && continue

    if [ -f "$DSAS_HAUT/$dir/$file" ]; then
      if  check_checksum $DSAS_HAUT/$dir/$file $chksum $chktype; then
        msgline $DSAS_HAUT/$dir/$file 1
      elif [ "$rpm_k" == "1" ] && ! rpm -K $DSAS_HAUT/$dir/$file 2>&1 1> /dev/null; then
        msgline $DSAS_HAUT/$dir/$file 5      
      else
        msgline $DSAS_HAUT/$dir/$file 0
        ln $DSAS_HAUT/$dir/$file $DSAS_BAS/$dir/$file
      fi
    fi  # For now ignore missing files
  done
}

verifrepo() {
  local tempdir fprint idx filelist chksum chktype unzipfile filetable
  local id=$1
  local dir=$(xmllint --xpath "string(dsas/tasks/task[$id]/directory)" $CONF)
  local type=$(xmllint --xpath "string(dsas/tasks/task[$id]/type)" $CONF)

  tempdir=$(mktemp -d)
  fprint=$(xmllint --xpath "string(dsas/tasks/task[$id]/cert[1]/fingerprint)" $CONF)
  idx=$(get_certificate $fprint)
  [ -z "$idx" ] && { 1>&2 echo "Certificate used by task($id) not found !!"; exit 1; }
  /bin/mv /tmp/cert.$$ $tempdir/cert.0
  gpg --dearmor $tempdir/cert.0

  if [ "$type" == "repomd" ]; then
    # Verify the repomd.xml against the GPG signature repomd.xml.asc
    # FIXME Why does this still print something !!
    if ! gpg --no-default-keyring --keyring $tempdir/cert.0.gpg  \
          --verify $DSAS_HAUT/$dir/repodata/repomd.xml.asc \
          $DSAS_HAUT/$dir/repodata/repomd.xml 2>&1 1> /dev/null; then
      1>&2 echo "Failed to verify repomd.xml signature"
      exit 1
    fi
  else
    # For rpm signature verification need to import GPG key
    sudo rpm --import $tempdir/cert.0 2>&1 1> /dev/null
  fi 

  # Create the destination directory if needed
  [ -d $DSAS_BAS/$dir ] || $(umask 007 && mkdir -p $DSAS_BAS/$dir && chgrp $grp $DSAS_BAS/$dir)


  # Identify the primary file list
  # Note that we have to ignore the xml namespace (initial cat/sed)
  filelist=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/location/@href)' -)

  # Verify its checksum
  chksum=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/checksum)' - )
  chktype=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
         sed -e "s:repomd xmlns:repomd ignore:g" | \
         xmllint --xpath 'string(//repomd/data[@type="primary"]/checksum/@type)' - )
  if  check_checksum $DSAS_HAUT/$dir/$filelist $chksum $chktype; then
    1>&2 echo "Error verifiying checksum of $filelist"
    exit 1
  fi

  # Unzip and verify the checksum of primary.xml
  chksum=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
          sed -e "s:repomd xmlns:repomd ignore:g" | \
          xmllint --xpath 'string(//repomd/data[@type="primary"]/open-checksum)' - )
  chktype=$(cat $DSAS_HAUT/$dir/repodata/repomd.xml | \
          sed -e "s:repomd xmlns:repomd ignore:g" | \
          xmllint --xpath 'string(//repomd/data[@type="primary"]/open-checksum/@type)' - )
  unzipfile=$(echo $filelist | sed -e "s/.gz//g")
  gunzip -k -f $DSAS_HAUT/$dir//$filelist
  if  check_checksum $DSAS_HAUT/$dir/$unzipfile $chksum $chktype; then
    1>&2 echo "Error verifiying checksum of $unzipfile"
    exit 1
  fi

  # Copy repomd.xml*  and primary.xml* to $bas
  ln $DSAS_HAUT/$dir/repodata/repomd.xml $DSAS_BAS/$dir/repodata/repomd.xml
  [ -f "$DSAS_HAUT/$dir/repodata/repomd.xml.asc" ] && ln $DSAS_HAUT/$dir/repodata/repomd.xml.asc $DSAS_BAS/$dir/repodata/repomd.xml.asc
  ln $DSAS_HAUT/$dir/$filelist $DSAS_BAS/$dir/$filelist
  ln $DSAS_HAUT/$dir/$unzipfile $DSAS_BAS/$dir/$unzipfile

  # Recover a table of the hashtype, hash and file names
  filetable=$(cat $DSAS_HAUT/$dir/$unzipfile | \
          sed -e "s/xmlns=/ignore=/g" | \
          xmllint --xpath '//package[@type="rpm"]/location | //package[@type="rpm"]/checksum' - | \
          sed -e 's:.*href="\(.*\)"/>$:\1:g' \
            -e 's:.*type="\([^"]*\)"[^>]*>\([0-9a-fA-F]*\)</checksum>:\1 \2:g')

  # Remove the files in $DSAS_BAS and not listed in primary.xml
  for _file in $(cd $DSAS_BAS/$dir; find . -path ./repodata -prune -type f -o -type f); do
    if [[ "$filetable" != *"${_file:2}"* ]]; then
      myecho "Removing stale file ${_file:2}"
      /bin/rm -f $DSAS_BAS/$dir/${_file:2}
    fi
  done

  # Verify the packages
  [ "$type" == "rpm" ] && verify_packages $dir 1 $filetable
  [ "$type" == "rpm" ] || verify_packages $dir 0 $filetable
  
  # Remove all RPM signature keys    
  [ "$type" == "rpm" ] && sudo rpm -e $(rpm -qa)

  /bin/rm -fr $tempdir
}

passdirectory(){
  local filetable file status i j fprint tempdir idx auth
  local id=$1
  local dir=$(xmllint --xpath "string(dsas/tasks/task[$id]/directory)" $CONF)

  # Create directory if needed
  [ -d $DSAS_BAS/$dir ] ||  $(umask 007 && mkdir -p $DSAS_BAS/$dir && chgrp $grp $DSAS_BAS/$dir)

  # Remove the files in our tree bas and not in haut.
  filetable=$(ls -1 $DSAS_HAUT/$dir)
  for file in $(cd $DSAS_BAS/$dir; find . -type f); do
    if [[ "$filetable" != *"${file:2}"* ]]; then
      myecho "Removing stale file ${file:2}"
      /bin/rm -f $DSAS_BAS/$dir/${file:2}
    fi
  done

  for file in $(cd $DSAS_HAUT; find $dir -type f); do
    # If file exists in bas skip. Hardlinked, so test is fast
    [ $DSAS_HAUT/$file -ef $DSAS_BAS/$file ] && continue

    # Don't log the transfers with msgline for the mache haut as
    # the logs aren't yet used
    ln "$DSAS_HAUT/$file" "$DSAS_BAS/$file"
  done
}

check_dsas

# Parse options
ids=""
while [ "$#" -gt 0 ]; do
  case $1 in
    -v|--verbose) verbose=1 ;;
    -q|--quiet) verbose=0 ;;
    -r[--rotate) rotate=1 ;;
    -n|--dryrun) dryrun=1 ;;
    -s|--stdout) logstdout=1 ;;
    -l|--log) logstdout=0 ;;
    -o) logfile=$2; shift 1 ;;
    --out=*) logfile=${1#*=} ;;
    -?|-h|--help) help; exit 0 ;;
    -*) 1>&2 echo "Unrecognized option : $1"; help; exit 1 ;;
    *) 
      [ -n "$ids" ] && { 1>&2 echo "Only a single task is allowed"; exit 1; }
      ids="$ids $1" 
      ;;
  esac
  shift 1
done

# If dryrun, force verbose
[ $dryrun -ne 0 ] && verbose=1

# Check that all ids are valid before doing anything
idx=""
for _id in $ids; do
  _idx=$(task_id_to_idx $_id)
  [ $? -ne 0 ] && { 1>&2 echo "Task id ($_id) does not exist"; exit 1; }
  idx="$idx $_idx"
done

for _id in $idx; do
  if [ "$TYP" == "haut" ]; then
    # No verification on the machine haut
    passdirectory $_id
  else
    type=$(xmllint --xpath "string(dsas/tasks/task[$_id]/type)" $CONF)
    case $type in
      rpm|repomd) verifrepo $_id; ;;
      deb) 1>&2 echo "DEB files are  are not yet implemented"; exit 1; ;;
      authenticode|openssl|gpg) verifdirectory $_id; ;; 
      *) 1>&2 echo "Unknown task type : $type"; exit 1 ;;
    esac
  fi
done

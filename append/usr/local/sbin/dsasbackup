#! /bin/sh
#    DSAS - Tinycore
#    Copyright (C) 2021-2022  Electricite de France
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Busybox ash not supported. Use posix SH and disable a couple of
# ash extensions I use
#
# shellcheck shell=sh
# shellcheck disable=SC2039

# If root rerun as user tc
if [ "$(id -u)" = 0 ];then
  sudo -E -u tc "$0" "$@"
  exit $?
fi

# if not user tc, quit
[ "$(whoami)" != "tc" ] && { 1>&2 echo "$0: Must de run as user 'tc'"; exit 1; }

if [ -f "$(dirname "$0")/dsas_common.sh" ]; then
  # shellcheck source=append/usr/local/sbin/dsas_common.sh
  . "$(dirname "$0")/dsas_common.sh"
else
  1>&2 echo "Common functions not found !!"
  exit 1
fi

# Only these specific files are saved. Anything else is forbidden.
# The SSH directories are needed to keep authorized keys, known_hosts, etc files
FILES="usr/local/etc/ssh/ssh_host_ecdsa_key
usr/local/etc/ssh/ssh_host_ecdsa_key.pub
usr/local/etc/ssh/ssh_host_ed25519_key
usr/local/etc/ssh/ssh_host_ed25519_key.pub
usr/local/etc/ssh/ssh_host_rsa_key
usr/local/etc/ssh/ssh_host_rsa_key.pub
var/dsas/dsas.csr
var/dsas/dsas.pem
var/dsas/dsas_conf.xml
var/dsas/dsas_priv.pem
var/dsas/dsas_pub.pem
var/dsas/dsas_typ
home/tc/.ssh/
home/haut/.ssh/
home/bas/.ssh/"

HAUT_EXTRA_FILES="opt/lftp/home/haut/.ssh/known_hosts"

RESTORE=0
APPLY=0
BKP=""
PASSWD=""

while [ "$#" -gt 0 ]; do
  case $1 in
    -r|--restore) RESTORE=1 ;;
    -b|--backup) RESTORE=0 ;;
    -a|--apply) APPLY=1; ;;
    -p) PASSWD="$2"; shift 1; ;;
    --password=*) PASSWD=${1#*=}; ;;
    -*) 1>&2 echo "Unrecognized option : $1"; help; exit 1; ;;
    *)  BKP="$1"; ;;
  esac
  shift 1
done
[ "$RESTORE" -eq 1 ] && [ ! -f "$BKP" ] && { 1>&2 echo "Backup file  doesn't exist"; exit 1; }
[ -z "$BKP" ] && BKP="/tmp/dsas_backup.tgz"

# According to https://bugs.debian.org/700758 bcrypt uses ECB block coding that is
# not cryptographically secure. Don't use bcrypt, but keep here to allow decryption
# of existing files
blowfish_encrypt(){
  cat << EOD | /usr/bin/bcrypt -c "$1" 2> /dev/null
$2
$2
EOD
}

blowfish_decrypt(){
  cat << EOD | /usr/bin/bcrypt -o "$1.bfe" 2> /dev/null > "$1"
$2
EOD
}

aes_encrypt(){
  openssl enc -aes-256-cbc -salt -pbkdf2 -k "$2" -in "$1" -out "$1.enc"
}

aes_decrypt(){
  openssl enc -aes-256-cbc -d -pbkdf2 -k "$2" -in "$1.enc" -out "$1"
}


if [ "$RESTORE" -eq 0 ]; then
  # Create the backup on the machine haut
  # shellcheck disable=SC2024
  # shellcheck disable=SC2086
  (umask 077; sudo sudo -u haut ssh "tc@$INTERCO_HAUT" sudo tar -C / -c -z -f - $FILES $HAUT_EXTRA_FILES > /tmp/haut.tgz)
  [ -n "$PASSWD" ] && (umask 077; cd /tmp || exit 1; aes_encrypt haut.tgz "$PASSWD")

  # Get the backup for the machine bas
  # shellcheck disable=SC2024
  # shellcheck disable=SC2086
  (umask 077; sudo tar -C / -c -z -f - $FILES > /tmp/bas.tgz)
  [ -n "$PASSWD" ] && (umask 077; cd /tmp || exit 1; aes_encrypt bas.tgz "$PASSWD")

  # Create the backup file
  [ -f "$BKP" ] && /bin/rm -f $BKP
  if [ -z "$PASSWD" ]; then
    (umask 077; cd /tmp || exit 1; tar -czf $BKP haut.tgz bas.tgz)
  else
    (umask 077; cd /tmp || exit 1; tar -czf $BKP haut.tgz.enc bas.tgz.enc)
  fi

  # Remove temporary files
  (cd /tmp || exit 1; /bin/rm -f haut.tgz bas.tgz haut.tgz.enc bas.tgz.enc)
else
  # Remove existing files
  (cd /tmp || exit 1; /bin/rm -f haut.tgz bas.tgz haut.tgz.bfe bas.tgz.bfe haut.tgz.enc bas.tgz.enc)

  # Unpack the tar file
  (umask 077; cd /tmp || exit 1; tar -zxf $BKP) || exit 1

  if [ -z "$PASSWD" ]; then
    [ -f "/tmp/haut.tgz" ] || { 1>&2 echo "Backup corrupted or encrypted"; exit 1; }
    [ -f "/tmp/bas.tgz" ] || { 1>&2 echo "Backup corrupted or encrypted"; exit 1; }
  else
    [ -f "/tmp/haut.tgz.bfe" ] || [ -f "/tmp/haut.tgz.enc" ] || { 1>&2 echo "Backup corrupted or not encrypted"; exit 1; }
    [ -f "/tmp/bas.tgz.bfe" ] || [ -f "/tmp/bas.tgz.enc" ] || { 1>&2 echo "Backup corrupted or not encrypted"; exit 1; }

    # Decrypt the files
    if [ -e "haut.tgz.bfe" ]; then
        (umask 077; cd /tmp || exit 1; blowfish_decrypt haut.tgz "$PASSWD") || \
            { 1>&2 echo "Can not decrypt the backup. Check the password"; exit 1; }
    else
        (umask 077; cd /tmp || exit 1; aes_decrypt haut.tgz "$PASSWD") || \
            { 1>&2 echo "Can not decrypt the backup. Check the password"; exit 1; }
    fi
    if [ -e "bas.tgz.bfe" ]; then
        (umask 077; cd /tmp || exit 1; blowfish_decrypt bas.tgz "$PASSWD") || \
            { 1>&2 echo "The backup is corrupted"; exit 1; }
    else
        (umask 077; cd /tmp || exit 1; aes_decrypt bas.tgz "$PASSWD") || \
            { 1>&2 echo "The backup is corrupted"; exit 1; }
    fi
  fi

  # Control the contents of the tar files and only allow files in the list $FILES
  for bkp in /tmp/bas.tgz /tmp/haut.tgz; do
    for file in $(tar tzf $bkp); do
      [ "$bkp" = "/tmp/haut.tgz" ] && _files="$FILES $HAUT_EXTRA_FILES" || _files=$FILES
      for p in $_files; do
        if [ "${p%/}" = "$p" ]; then
          [ "$file" = "$p" ] && continue 2  # legal file
        else
          [ "${file:0:${#p}}" = "$p" ] && continue 2  # legal directory
        fi
      done
      if [ "$bkp" = "/tmp/haut.tgz" ]; then

      fi
      { 1>&2 echo "The backup contains illegal files"; exit 1; }
    done
  done

  # The value of dsas->config->users->first should be preserved
  first=$(xmllint --xpath 'string(dsas/config/users/first)' "$VAR/dsas_conf.xml")

  # Unpack the files on machine haut
  (sudo sudo -u haut ssh "tc@$INTERCO_HAUT" sudo tar -C / -x -z -f -) < /tmp/haut.tgz || \
      { 1>&2 echo "Can not transfer the backup to the machine haut"; exit 1; }

  # Unpack the files on machine bas
  (sudo tar -C / -x -z -f /tmp/bas.tgz)

  # Restore the value of first
  args="cd /dsas/config/users\nset"
  if [ -z "$first" ]; then
    args="$args <first />"
  else
    args="$args <first>$first</first>"
  fi
  for arg in $(xmllint --xpath "dsas/config/users/*" "$VAR/dsas_conf.xml"); do
    [[ "$arg" =~ "^<first" ]] && continue
    args="$args$arg"
  done
  args="$args\nsave"
  echo -e "$arg" | xmllint --shell "$VAR/dsas_conf.xml" > /dev/null 2>&1

  # The installed users need to be updated with adduser/deluser to correspond to
  # the users in the xml config file, but only on the machine bas
  while read -r line; do
    user=$(echo "$line" | cut -d: -f1)
    uid=$(echo "$line" | cut -d: -f3)
    [ "$uid" -lt 1000 ] && continue
    [ "$user" = "tc" ] && continue
    [ "$user" = "bas" ] && continue
    [ "$user" = "haut" ] && continue
    [ "$user" = "verif" ] && continue
    [ "$user" = "nobody" ] && continue
    # Have an added user
    id=1
    while :; do
      _user=$(xmllint --xpath "string(dsas/config/users/user[$id]/username)" "$VAR/dsas_conf.xml")
      [ -z "$_user" ] && break
      [ "$user" = "$_user" ] && continue 2
      id=$((id + 1))
    done
    sudo deluser "$user"
  done < /etc/passwd
  id=1
  while :; do
    _user=$(xmllint --xpath "string(dsas/config/users/user[$id]/username)" "$VAR/dsas_conf.xml")
    [ -z "$_user" ] && break
    if ! cut -f1 -d: /etc/passwd | grep -x -q "$_user"; then
      sudo adduser -G users -h "$DSAS_HOME/$_user" -s /bin/sh -D "$_user"
    fi
    id=$((id + 1))
  done

  # At this point the ssh hosts and keys are setup. Link them to the chroot jail,
  # in a manner that they can't be abused to create an executable.
  # Don't mount /home/haut as this will give the user the capacity to create an executable
  (sudo rm -fr /opt/lftp/home/haut/.ssh; sudo cp -r /home/haut/.ssh/ /opt/lftp/home/haut/.ssh; sudo chmod 550 /opt/lftp/home/haut/.ssh)
  sudo chown -R root:haut /opt/lftp/home/haut
  sudo chmod 0550 /opt/lftp/home/haut /opt/lftp/home/haut/.ssh

  # Restart the ssh server to force reading the host keys. Using SSH to restart
  # SSH on the haut machine is not a problem as active sessions stay active
  (sudo sudo -u haut ssh "tc@$INTERCO_HAUT" sudo /usr/local/etc/init.d/openssh restart)
  pgrep sshd > /dev/null && sudo /usr/local/etc/init.d/openssh restart

  # Save the restored files to the active configuration.
  /usr/bin/filetool.sh -b > /dev/null 2>&1 || { 1>&2 echo "Error running filetool"; exit 1; }

  # Apply the configuration if requested
  if [ "$APPLY" -ne 0 ]; then
    sudo /etc/init.d/services/dsas apply > /dev/null 2>&1 || \
        { 1>&2 echo "Error applying the configuration"; exit 1; }
  fi

  # Remove temporary files
  (cd /tmp || exit 1; /bin/rm -f haut.tgz bas.tgz haut.tgz.bfe bas.tgz.bfe haut.tgz.enc bas.tgz.enc)
fi


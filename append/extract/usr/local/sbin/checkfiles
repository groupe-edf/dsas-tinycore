#! /bin/sh

cd $(dirname $0)

#### FIXME : Temporary directories for testing
bas=/home/tc/ca/test/bas
haut=/home/tc/ca/test/haut

# Default options
verbose=1
movefiles=1
deletebad=1
logfile="verif_log"
logstdout=0
dryrun=0
rotatemax=6 
reject=reject
symantec_uri="ftp://noeysep3.noe.edf.fr//IntelligentUpdater/SEP14/"
symantec_dir=symantec

msg() {
  if [ $logstdout = "1" ]; then
    printf "%-3s %-15s %-32s %s\n" "$1" "$2" "$3" "$4"
  else
    printf "%-3s %-15s %-32s %s\n" "$1" "$2" "$3" "$4" >> $logfile
  fi
}

msgline() {
  file=$1
  status=$2
  md5=$(cat $file | md5sum | sed -e "s/  -$//g")
  _file=`echo $file | sed -e "s:^${haut}/::g"`
  case $status in
    0) [ $verbose == 1 ] && msg "  "  "Ok"  $md5 $_file ;;
    -1)  msg "XX"  "Unknown type"   $md5  $_file ;;
    1)   msg "**"  "Bad Sig"        $md5  $_file ;;
    2)   msg "$$"  "Checksum fail"  $md5  $_file ;;
    255) msg "**"  "Not signed"     $md5  $_file ;;
    *)   msg "XX"  "Unknown status" $md5  $_file ;;
  esac
}

help() {
  echo "Usage: $(basename $0)  [Options] COMMAND"
  echo "Verify windows signatures"
  echo "     -v|--verbose    Log all files verified" 
  echo "     -q|--quiet      Log only files failing to verifiy"
  echo "     -r|--dryrun     Perform no actions"
  echo "     -m|--move       Move files"
  echo "     -x|--link       Leave files in place and hard-link"
  echo "     -d|--delete     Delete files faling to verify"
  echo "     -k|--keep       Keep all files"
  echo "     -s|--stdout     Send logs to stdout"
  echo "     -l|--log        Send the logs to a file"
  echo "     -o <FILE>       Log to <FILE>, default $logfile"
  echo "     --out=<FILE>    Log to <FILE>"
  echo "     -?|-h|--help    Print this help"
  echo "Commands:"
  echo "     rotate          Rotate the log files"
  echo "     incoming        Treat the files in the incoming directory"
  echo "     symantec        Download SEP signatures and verify"
  echo "     centos          Download centos repo and verify"
  echo "     windows         Download windows KBs and verify"
}

mv() {
  if [ $dryrun == "0"]; then
    /bin/mv $*
  else
    echo "[DryRun] mv $*"
  fi
}

ln() {
  if [ $dryrun == "0"]; then
    /bin/ln $*
  else
    echo "[DryRun] ln $*"
  fi
}

rm() {
  if [ $dryrun == "0"]; then
    /bin/rm $*
  else
    echo "[DryRun] rm $*"
  fi
}

move() {
  if [ $dryrun == "0"]; then
    mkdir -p $(dirname $2)
  fi
  if [ $movefiles == "1" ]; then
    mv $1 $2
  else
    ln $1 $2
  fi
}

treatbad() {
  if [ $deletebad == "1" ]; then
    rm "$file"
  else
    if [ $movefiles == "1" ]; then
      mv "$file" "$haut/$reject/$_file"
    else
      ln "$file" "$haut/$reject/$_file"
    fi 
  fi
}

rotatelogs() {
  [ -f "${logfile}.$rotatemax" ] && rm "${logfile}.$rotatemax"
  for i in $(seq $rotatemax -1 2); do
    i1=$(echo "$i 1 - p" | dc)
    [ -f "${logfile}.$i1" ] && mv "${logfile}.$i1" "${logfile}.$i"
  done
  [ -f "${logfile}" ] && mv "${logfile}" "${logfile}.1"
  exit 0
}

iswindowsfile() {
  # FIXME Is this list complete ?
  case '$1' in
    application/x-dosexec | \
    application/vnd.ms-cab-compressed | \
    application/x-ms-application | \
    application/x-ms-installer | \
    application/x-windows-installer | \
    application/x-msi | \
    application/vnd.microsoft.portable-executable)
      retval=1
      ;;
    *) retval=0 ;;
  esac
  return $retval
}

treatwindowsfiles() {
  dir=$1
  ca=$2
  for file in `find $haut/$dir -type f`; do
    mtype=$(file --brief --mime-type $file)
    _file=`echo $file | sed -e "s:^${haut}/::g"`
    if iswindowsfile $mtype; then
      if [ -z $ca ] && osslsigncode verify $file > /dev/null 2>&1
      if [ -z $ca ] || osslsigncode verify -CAfile $ca $file > /dev/null 2>&1
      status=$?
      msgline $file $status
      case $status in
        0) move "$file" "$bas/$_file"; ;;
        *) treatbad "$file" "$haut/$reject/$_file"; ;;
      esac
    else
      echo "Unknown file type : $mtype"
      msgline $file -1
      treatbad "$file" "$haut/$reject/$_file"
    fi
  done
}

# For now only test the signature of windows files. What should
# really be done here ? This is not a perfect solution 
# (see http://attack.mitre.org/techniques/T1553/002). Perhaps
# add a antivirus ? Verify by hand ? 
incoming() {
  treatwindowsfiles incoming
}

# Use a CA with only the windows CA to limit to only
# code signed by microsoft
windows() {
  # FIXME add dedicated Microsoft CAfile
  # treatwindowsfiles windows CAFILE
  treatwindowsfiles windows
} 

# Symantec has an EV coding signing intermediate certificate from 
# Digicert (who they sold there CA to in 2016). For now don't
# clean up the ca-certificates package !!
# Need to find a way to ensure the Symantec code signing intermediate
# certificate is use !!
symantec() {
  treatwindowsfiles symantec
}

# Usage : check_checksum <file> <chksum> <type>                                 
check_checksum() {                                                              
  _file=$1                                                                      
  _chksum=$2                                                                    
  _chktype=$3                                                                   
                                                                                
  case $_chktype in                                                             
    sha)                                                                        
      chk=$(cat $_file | sha1sum - | sed -e "s/ -$//g")                         
      ;;                                                                        
    md5)                                                                        
      chk=$(cat $_file | md5sum - | sed -e "s/ -$//g")                          
      ;;                                                                        
    *)                                                                          
     return 0                                                                   
     ;;                                                                         
  esac                                                                          
                                                                                
  if [ $chk != $_chksum ]; then                                                 
    return 0                                                                    
  fi                                                                            
  return 1                                                                      
}

verify_packages() {                                                                
  prefix=$1
  src=$2
  dest=$3                                                                       
  shift 3                                                                       
  while [ "$#" -gt 2 ]; do                                                      
    if [ ${1: -3} == "rpm" ]; then                                              
      file=$1                                                                   
      chktype=$2                                                                
      chksum=$3                                                                 
    else                                                                        
     file=$3                                                                    
     chktype=$1                                                                 
     chksum=$2                                                                  
    fi                                                                          
    if [ -f "$src/$file" ]; then                                               
      if  check_checksum $dest/$file $chksum $chktype; then                     
        msgline $prefix/$file 1
        treatbad $src/$file $haut/$reject/$file
      else                                                                      
        msgline $prefix/$file 0
        move $src/$file $dest/$file
      fi
    fi  # For now ignore missing files
    shift 3
  done
}


centos() {
  for repo un $centos_repos; do
    name=$(echo $repo | cut -d\| -f1)                                           
    uri=$(echo $repo | cut -d\| -f2)                                            

    # Verify the repomd.xml against the GPG signature repomd.xml.asc



    # Verify checksum of primary.xml
    filelist=$(cat $haut/$centos_dir/$name/repodata/repomd.xml | sed -e "s:repom
    chksum=$(cat $haut/$centos_dir/$name/repodata/repomd.xml | sed -e "s:repomd 
    chktype=$(cat $haut/$centos_dir/$name/repodata/repomd.xml | sed -e "s:repomd
    if  check_checksum $haut/$centos_dir/$name/$filelist $chksum $chktype; then 
      2>1 echo "Error verifiying checksum of $filelist"                         
      msgline $centos_dir/$name/$filelist 2
      treatbad "$centos_dir/$name/$unzipfile" "$haut/$reject/$centos_dir/$name/$unzipfile";
      continue                                                                  
    fi                                                                          
                                                                                
    # Unzip and verify the checksum of primary.xml                              
    chksum=$(cat $haut/$centos_dir/$name/repodata/repomd.xml | sed -e "s:repomd 
    chktype=$(cat $haut/$centos_dir/$name/repodata/repomd.xml | sed -e "s:repomd
    unzipfile=$(echo $filelist | sed -e "s/.gz//g")                             
    [ -f $unzipfile ] && gunzip -k -f $haut/$centos_dir/$name/$filelist                              
    if  check_checksum $haut/$centos_dir/$name/$unzipfile $chksum $chktype; then
      2>1 echo "Error verifiying checksum of $unzipfile"                        
      msgline $centos_dir/$name/$unzipfile 2                                                                 
      treatbad "$centos_dir/$name/$unzipfile" "$haut/$reject/$centos_dir/$name/$unzipfile";
      continue
    fi

    # Copy repomd.xml*  and primary.xml* to $bas
    move $haut/$centos_dir/$name/$repodata/repomd.xml \ 
          $bas/$centos_dir/$name/$repodata/repomd.xml 
    move $haut/$centos_dir/$name/$repodata/repomd.xml.asc \
          $bas/$centos_dir/$name/$repodata/repomd.xml.asc
    move $haut/$centos_dir/$name/$filelist \
          $bas/$centos_dir/$name/$filelist
    move $haut/$centos_dir/$name/$unzipfile \
          $bas/$centos_dir/$name/$unzipfile

    # Recover a table of the hashtype, hash and file names                      
    filetable=$(cat $haut/$centos_dir/$name/$unzipfile | sed -e "s/xmlns=/ignore

    # Remove the files in our tree $bas and not listed in primary.xml                    
    for _file in $(cd $bas/$centos_dir/$name; find . -path ./repodata -prune -false -o -type f); do
      if [[ "$filetable*" != *"${_file:2}"* ]]; then                            
        echo "Removing stale file ${_file:2}"                                   
        rm $bas/$centos_dir/$name/${_file:2}                                   
      fi                                                                        
    done                                                                        

    # Verify the packages
    verify_packages $centos_dir/$name $haut/$centos/$name $bas/$centos_dir/$name $filetable
}

# Find the upper and lower zones
[ -d /home/dsas/bas ] && bas=/home/dsas/bas
[ -z $bas ] && [ -d /home/bas ] && bas=/home/bas
[ -d /home/dsas/haut ] && haut=/home/dsas/haut
[ -z $haut ] && [ -d /home/haut ] && haut=/home/haut
[ -z $bas ] && $(2>1 echo "Zone bas not found"; exit 1)
[ -z $haut ] && $(2>1 echo "Zone haut not found"; exit 1)

# Parse options
while [ "$#" -gt 0 ]; do
  case $1 in
    -v|--verbose) verbose=1 ;; 
    -q|--quiet) verbose=0 ;;
    -r---dryrun) dryrun=1 ;;
    -m|--move) movefiles=1 ;;
    -x|--link) movefiles=0 ;;
    -d|--delete) deletebad=1 ;;
    -k|--keep) deletebad=0 ;;
    -s|--stdout) logstdout=1 ;;
    -l|--log) logstdout=0 ;;
    -o) logfile=$2; shift 1 ;;
    --out=*) logfile=${1#*=} ;;
    -?|-h|--help) help; exit 0 ;;
    -*) 2>1 echo "Unrecognized option : $1"; help; exit 1 ;;
    *) 
      if [ ! -z $command ]; then
	2>1 echo "Only a single command allowed: $command"
        exit 1
      fi
      command=$1
  esac
  shift 1
done

if [ -z $command ]; then
 echo "No command given"
 exit 1
fi
 
case $command in
  rotate) rotatelogs ;;
  incoming) incoming ;;
  symantec) symantec ;;
  centos) centos ;;
  windows) windows ;;
  *) echo "Unknown command '$command'"; exit 1 ;;
esac

